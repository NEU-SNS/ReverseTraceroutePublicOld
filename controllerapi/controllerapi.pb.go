/*
Copyright (c) 2015, Northeastern University
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of the Northeastern University nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL Northeastern University BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/controllerapi/controllerapi.proto
// DO NOT EDIT!

/*
Package controllerapi is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/controllerapi/controllerapi.proto

It has these top-level messages:
*/
package controllerapi

import proto "github.com/golang/protobuf/proto"
import datamodel2 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel4 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel5 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel6 "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

func init() {
}

// Client API for Controller service

type ControllerClient interface {
	Ping(ctx context.Context, in *datamodel2.PingArg, opts ...grpc.CallOption) (*datamodel2.PingReturn, error)
	Traceroute(ctx context.Context, in *datamodel4.TracerouteArg, opts ...grpc.CallOption) (*datamodel4.TracerouteReturn, error)
	GetVPs(ctx context.Context, in *datamodel5.VPRequest, opts ...grpc.CallOption) (*datamodel5.VPReturn, error)
	ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Ping(ctx context.Context, in *datamodel2.PingArg, opts ...grpc.CallOption) (*datamodel2.PingReturn, error) {
	out := new(datamodel2.PingReturn)
	err := grpc.Invoke(ctx, "/.Controller/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Traceroute(ctx context.Context, in *datamodel4.TracerouteArg, opts ...grpc.CallOption) (*datamodel4.TracerouteReturn, error) {
	out := new(datamodel4.TracerouteReturn)
	err := grpc.Invoke(ctx, "/.Controller/Traceroute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetVPs(ctx context.Context, in *datamodel5.VPRequest, opts ...grpc.CallOption) (*datamodel5.VPReturn, error) {
	out := new(datamodel5.VPReturn)
	err := grpc.Invoke(ctx, "/.Controller/GetVPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[0], c.cc, "/.Controller/ReceiveSpoofedProbes", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerReceiveSpoofedProbesClient{stream}
	return x, nil
}

type Controller_ReceiveSpoofedProbesClient interface {
	Send(*datamodel6.SpoofedProbe) error
	CloseAndRecv() (*datamodel6.ReceiveSpoofedProbesResponse, error)
	grpc.ClientStream
}

type controllerReceiveSpoofedProbesClient struct {
	grpc.ClientStream
}

func (x *controllerReceiveSpoofedProbesClient) Send(m *datamodel6.SpoofedProbe) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesClient) CloseAndRecv() (*datamodel6.ReceiveSpoofedProbesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(datamodel6.ReceiveSpoofedProbesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	Ping(context.Context, *datamodel2.PingArg) (*datamodel2.PingReturn, error)
	Traceroute(context.Context, *datamodel4.TracerouteArg) (*datamodel4.TracerouteReturn, error)
	GetVPs(context.Context, *datamodel5.VPRequest) (*datamodel5.VPReturn, error)
	ReceiveSpoofedProbes(Controller_ReceiveSpoofedProbesServer) error
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Ping_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel2.PingArg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Controller_Traceroute_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel4.TracerouteArg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).Traceroute(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Controller_GetVPs_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel5.VPRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).GetVPs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Controller_ReceiveSpoofedProbes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).ReceiveSpoofedProbes(&controllerReceiveSpoofedProbesServer{stream})
}

type Controller_ReceiveSpoofedProbesServer interface {
	SendAndClose(*datamodel6.ReceiveSpoofedProbesResponse) error
	Recv() (*datamodel6.SpoofedProbe, error)
	grpc.ServerStream
}

type controllerReceiveSpoofedProbesServer struct {
	grpc.ServerStream
}

func (x *controllerReceiveSpoofedProbesServer) SendAndClose(m *datamodel6.ReceiveSpoofedProbesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesServer) Recv() (*datamodel6.SpoofedProbe, error) {
	m := new(datamodel6.SpoofedProbe)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Controller_Ping_Handler,
		},
		{
			MethodName: "Traceroute",
			Handler:    _Controller_Traceroute_Handler,
		},
		{
			MethodName: "GetVPs",
			Handler:    _Controller_GetVPs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveSpoofedProbes",
			Handler:       _Controller_ReceiveSpoofedProbes_Handler,
			ClientStreams: true,
		},
	},
}
