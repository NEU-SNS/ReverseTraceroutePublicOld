// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/controllerapi/controllerapi.proto
// DO NOT EDIT!

/*
Package controllerapi is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/controllerapi/controllerapi.proto

It has these top-level messages:
*/
package controllerapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import datamodel1 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel2 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel3 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel4 "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Controller service

type ControllerClient interface {
	Ping(ctx context.Context, in *datamodel1.PingArg, opts ...grpc.CallOption) (Controller_PingClient, error)
	Traceroute(ctx context.Context, in *datamodel2.TracerouteArg, opts ...grpc.CallOption) (Controller_TracerouteClient, error)
	GetVPs(ctx context.Context, in *datamodel3.VPRequest, opts ...grpc.CallOption) (*datamodel3.VPReturn, error)
	ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Ping(ctx context.Context, in *datamodel1.PingArg, opts ...grpc.CallOption) (Controller_PingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[0], c.cc, "/.Controller/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_PingClient interface {
	Recv() (*datamodel1.Ping, error)
	grpc.ClientStream
}

type controllerPingClient struct {
	grpc.ClientStream
}

func (x *controllerPingClient) Recv() (*datamodel1.Ping, error) {
	m := new(datamodel1.Ping)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) Traceroute(ctx context.Context, in *datamodel2.TracerouteArg, opts ...grpc.CallOption) (Controller_TracerouteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[1], c.cc, "/.Controller/Traceroute", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerTracerouteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_TracerouteClient interface {
	Recv() (*datamodel2.Traceroute, error)
	grpc.ClientStream
}

type controllerTracerouteClient struct {
	grpc.ClientStream
}

func (x *controllerTracerouteClient) Recv() (*datamodel2.Traceroute, error) {
	m := new(datamodel2.Traceroute)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetVPs(ctx context.Context, in *datamodel3.VPRequest, opts ...grpc.CallOption) (*datamodel3.VPReturn, error) {
	out := new(datamodel3.VPReturn)
	err := grpc.Invoke(ctx, "/.Controller/GetVPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[2], c.cc, "/.Controller/ReceiveSpoofedProbes", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerReceiveSpoofedProbesClient{stream}
	return x, nil
}

type Controller_ReceiveSpoofedProbesClient interface {
	Send(*datamodel4.Probe) error
	CloseAndRecv() (*datamodel4.ReceiveSpoofedProbesResponse, error)
	grpc.ClientStream
}

type controllerReceiveSpoofedProbesClient struct {
	grpc.ClientStream
}

func (x *controllerReceiveSpoofedProbesClient) Send(m *datamodel4.Probe) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesClient) CloseAndRecv() (*datamodel4.ReceiveSpoofedProbesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(datamodel4.ReceiveSpoofedProbesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	Ping(*datamodel1.PingArg, Controller_PingServer) error
	Traceroute(*datamodel2.TracerouteArg, Controller_TracerouteServer) error
	GetVPs(context.Context, *datamodel3.VPRequest) (*datamodel3.VPReturn, error)
	ReceiveSpoofedProbes(Controller_ReceiveSpoofedProbesServer) error
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel1.PingArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Ping(m, &controllerPingServer{stream})
}

type Controller_PingServer interface {
	Send(*datamodel1.Ping) error
	grpc.ServerStream
}

type controllerPingServer struct {
	grpc.ServerStream
}

func (x *controllerPingServer) Send(m *datamodel1.Ping) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_Traceroute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel2.TracerouteArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Traceroute(m, &controllerTracerouteServer{stream})
}

type Controller_TracerouteServer interface {
	Send(*datamodel2.Traceroute) error
	grpc.ServerStream
}

type controllerTracerouteServer struct {
	grpc.ServerStream
}

func (x *controllerTracerouteServer) Send(m *datamodel2.Traceroute) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_GetVPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(datamodel3.VPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).GetVPs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Controller_ReceiveSpoofedProbes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).ReceiveSpoofedProbes(&controllerReceiveSpoofedProbesServer{stream})
}

type Controller_ReceiveSpoofedProbesServer interface {
	SendAndClose(*datamodel4.ReceiveSpoofedProbesResponse) error
	Recv() (*datamodel4.Probe, error)
	grpc.ServerStream
}

type controllerReceiveSpoofedProbesServer struct {
	grpc.ServerStream
}

func (x *controllerReceiveSpoofedProbesServer) SendAndClose(m *datamodel4.ReceiveSpoofedProbesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesServer) Recv() (*datamodel4.Probe, error) {
	m := new(datamodel4.Probe)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVPs",
			Handler:    _Controller_GetVPs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Controller_Ping_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Traceroute",
			Handler:       _Controller_Traceroute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveSpoofedProbes",
			Handler:       _Controller_ReceiveSpoofedProbes_Handler,
			ClientStreams: true,
		},
	},
}
