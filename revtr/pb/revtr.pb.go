// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/revtr/pb/revtr.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/revtr/pb/revtr.proto

It has these top-level messages:
	RevtrMeasurement
	RunRevtrReq
	RunRevtrResp
	GetRevtrReq
	GetRevtrResp
	GetSourcesReq
	GetSourcesResp
	Source
	ReverseTraceroute
	RevtrHop
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RevtrHopType int32

const (
	RevtrHopType_DUMMY                                         RevtrHopType = 0
	RevtrHopType_DST_REV_SEGMENT                               RevtrHopType = 1
	RevtrHopType_DST_SYM_REV_SEGMENT                           RevtrHopType = 2
	RevtrHopType_TR_TO_SRC_REV_SEGMENT                         RevtrHopType = 3
	RevtrHopType_RR_REV_SEGMENT                                RevtrHopType = 4
	RevtrHopType_SPOOF_RR_REV_SEGMENT                          RevtrHopType = 5
	RevtrHopType_TS_ADJ_REV_SEGMENT                            RevtrHopType = 6
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT                      RevtrHopType = 7
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO              RevtrHopType = 8
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP RevtrHopType = 9
)

var RevtrHopType_name = map[int32]string{
	0: "DUMMY",
	1: "DST_REV_SEGMENT",
	2: "DST_SYM_REV_SEGMENT",
	3: "TR_TO_SRC_REV_SEGMENT",
	4: "RR_REV_SEGMENT",
	5: "SPOOF_RR_REV_SEGMENT",
	6: "TS_ADJ_REV_SEGMENT",
	7: "SPOOF_TS_ADJ_REV_SEGMENT",
	8: "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO",
	9: "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP",
}
var RevtrHopType_value = map[string]int32{
	"DUMMY":                                         0,
	"DST_REV_SEGMENT":                               1,
	"DST_SYM_REV_SEGMENT":                           2,
	"TR_TO_SRC_REV_SEGMENT":                         3,
	"RR_REV_SEGMENT":                                4,
	"SPOOF_RR_REV_SEGMENT":                          5,
	"TS_ADJ_REV_SEGMENT":                            6,
	"SPOOF_TS_ADJ_REV_SEGMENT":                      7,
	"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO":              8,
	"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP": 9,
}

func (x RevtrHopType) String() string {
	return proto.EnumName(RevtrHopType_name, int32(x))
}
func (RevtrHopType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RevtrStatus int32

const (
	RevtrStatus_DUMMY_X   RevtrStatus = 0
	RevtrStatus_RUNNING   RevtrStatus = 1
	RevtrStatus_COMPLETED RevtrStatus = 2
)

var RevtrStatus_name = map[int32]string{
	0: "DUMMY_X",
	1: "RUNNING",
	2: "COMPLETED",
}
var RevtrStatus_value = map[string]int32{
	"DUMMY_X":   0,
	"RUNNING":   1,
	"COMPLETED": 2,
}

func (x RevtrStatus) String() string {
	return proto.EnumName(RevtrStatus_name, int32(x))
}
func (RevtrStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RevtrMeasurement struct {
	Src            string `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dst            string `protobuf:"bytes,2,opt,name=dst" json:"dst,omitempty"`
	Staleness      uint32 `protobuf:"varint,3,opt,name=staleness" json:"staleness,omitempty"`
	Id             uint32 `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	BackoffEndhost bool   `protobuf:"varint,5,opt,name=backoff_endhost" json:"backoff_endhost,omitempty"`
}

func (m *RevtrMeasurement) Reset()                    { *m = RevtrMeasurement{} }
func (m *RevtrMeasurement) String() string            { return proto.CompactTextString(m) }
func (*RevtrMeasurement) ProtoMessage()               {}
func (*RevtrMeasurement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RunRevtrReq struct {
	Revtrs []*RevtrMeasurement `protobuf:"bytes,1,rep,name=revtrs" json:"revtrs,omitempty"`
	Auth   string              `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (m *RunRevtrReq) Reset()                    { *m = RunRevtrReq{} }
func (m *RunRevtrReq) String() string            { return proto.CompactTextString(m) }
func (*RunRevtrReq) ProtoMessage()               {}
func (*RunRevtrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RunRevtrReq) GetRevtrs() []*RevtrMeasurement {
	if m != nil {
		return m.Revtrs
	}
	return nil
}

type RunRevtrResp struct {
	BatchId   uint32 `protobuf:"varint,1,opt,name=batch_id" json:"batch_id,omitempty"`
	ResultUrl string `protobuf:"bytes,2,opt,name=result_url" json:"result_url,omitempty"`
}

func (m *RunRevtrResp) Reset()                    { *m = RunRevtrResp{} }
func (m *RunRevtrResp) String() string            { return proto.CompactTextString(m) }
func (*RunRevtrResp) ProtoMessage()               {}
func (*RunRevtrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetRevtrReq struct {
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id" json:"batch_id,omitempty"`
	Auth    string `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (m *GetRevtrReq) Reset()                    { *m = GetRevtrReq{} }
func (m *GetRevtrReq) String() string            { return proto.CompactTextString(m) }
func (*GetRevtrReq) ProtoMessage()               {}
func (*GetRevtrReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetRevtrResp struct {
	Revtrs []*ReverseTraceroute `protobuf:"bytes,1,rep,name=revtrs" json:"revtrs,omitempty"`
}

func (m *GetRevtrResp) Reset()                    { *m = GetRevtrResp{} }
func (m *GetRevtrResp) String() string            { return proto.CompactTextString(m) }
func (*GetRevtrResp) ProtoMessage()               {}
func (*GetRevtrResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetRevtrResp) GetRevtrs() []*ReverseTraceroute {
	if m != nil {
		return m.Revtrs
	}
	return nil
}

type GetSourcesReq struct {
	Auth string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *GetSourcesReq) Reset()                    { *m = GetSourcesReq{} }
func (m *GetSourcesReq) String() string            { return proto.CompactTextString(m) }
func (*GetSourcesReq) ProtoMessage()               {}
func (*GetSourcesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetSourcesResp struct {
	Srcs []*Source `protobuf:"bytes,1,rep,name=srcs" json:"srcs,omitempty"`
}

func (m *GetSourcesResp) Reset()                    { *m = GetSourcesResp{} }
func (m *GetSourcesResp) String() string            { return proto.CompactTextString(m) }
func (*GetSourcesResp) ProtoMessage()               {}
func (*GetSourcesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetSourcesResp) GetSrcs() []*Source {
	if m != nil {
		return m.Srcs
	}
	return nil
}

type Source struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ReverseTraceroute struct {
	Status     RevtrStatus `protobuf:"varint,1,opt,name=status,enum=pb.RevtrStatus" json:"status,omitempty"`
	Src        string      `protobuf:"bytes,2,opt,name=src" json:"src,omitempty"`
	Dst        string      `protobuf:"bytes,3,opt,name=dst" json:"dst,omitempty"`
	Runtime    int64       `protobuf:"varint,4,opt,name=runtime" json:"runtime,omitempty"`
	RrIssued   int32       `protobuf:"varint,5,opt,name=rr_issued" json:"rr_issued,omitempty"`
	TsIssued   int32       `protobuf:"varint,6,opt,name=ts_issued" json:"ts_issued,omitempty"`
	StopReason string      `protobuf:"bytes,7,opt,name=stop_reason" json:"stop_reason,omitempty"`
	Date       string      `protobuf:"bytes,8,opt,name=date" json:"date,omitempty"`
	Path       []*RevtrHop `protobuf:"bytes,9,rep,name=path" json:"path,omitempty"`
	Id         uint32      `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
}

func (m *ReverseTraceroute) Reset()                    { *m = ReverseTraceroute{} }
func (m *ReverseTraceroute) String() string            { return proto.CompactTextString(m) }
func (*ReverseTraceroute) ProtoMessage()               {}
func (*ReverseTraceroute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReverseTraceroute) GetPath() []*RevtrHop {
	if m != nil {
		return m.Path
	}
	return nil
}

type RevtrHop struct {
	Hop  string       `protobuf:"bytes,1,opt,name=hop" json:"hop,omitempty"`
	Type RevtrHopType `protobuf:"varint,2,opt,name=type,enum=pb.RevtrHopType" json:"type,omitempty"`
}

func (m *RevtrHop) Reset()                    { *m = RevtrHop{} }
func (m *RevtrHop) String() string            { return proto.CompactTextString(m) }
func (*RevtrHop) ProtoMessage()               {}
func (*RevtrHop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*RevtrMeasurement)(nil), "pb.RevtrMeasurement")
	proto.RegisterType((*RunRevtrReq)(nil), "pb.RunRevtrReq")
	proto.RegisterType((*RunRevtrResp)(nil), "pb.RunRevtrResp")
	proto.RegisterType((*GetRevtrReq)(nil), "pb.GetRevtrReq")
	proto.RegisterType((*GetRevtrResp)(nil), "pb.GetRevtrResp")
	proto.RegisterType((*GetSourcesReq)(nil), "pb.GetSourcesReq")
	proto.RegisterType((*GetSourcesResp)(nil), "pb.GetSourcesResp")
	proto.RegisterType((*Source)(nil), "pb.Source")
	proto.RegisterType((*ReverseTraceroute)(nil), "pb.ReverseTraceroute")
	proto.RegisterType((*RevtrHop)(nil), "pb.RevtrHop")
	proto.RegisterEnum("pb.RevtrHopType", RevtrHopType_name, RevtrHopType_value)
	proto.RegisterEnum("pb.RevtrStatus", RevtrStatus_name, RevtrStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Revtr service

type RevtrClient interface {
	RunRevtr(ctx context.Context, in *RunRevtrReq, opts ...grpc.CallOption) (*RunRevtrResp, error)
	GetRevtr(ctx context.Context, in *GetRevtrReq, opts ...grpc.CallOption) (*GetRevtrResp, error)
	GetSources(ctx context.Context, in *GetSourcesReq, opts ...grpc.CallOption) (*GetSourcesResp, error)
}

type revtrClient struct {
	cc *grpc.ClientConn
}

func NewRevtrClient(cc *grpc.ClientConn) RevtrClient {
	return &revtrClient{cc}
}

func (c *revtrClient) RunRevtr(ctx context.Context, in *RunRevtrReq, opts ...grpc.CallOption) (*RunRevtrResp, error) {
	out := new(RunRevtrResp)
	err := grpc.Invoke(ctx, "/pb.Revtr/RunRevtr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) GetRevtr(ctx context.Context, in *GetRevtrReq, opts ...grpc.CallOption) (*GetRevtrResp, error) {
	out := new(GetRevtrResp)
	err := grpc.Invoke(ctx, "/pb.Revtr/GetRevtr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revtrClient) GetSources(ctx context.Context, in *GetSourcesReq, opts ...grpc.CallOption) (*GetSourcesResp, error) {
	out := new(GetSourcesResp)
	err := grpc.Invoke(ctx, "/pb.Revtr/GetSources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Revtr service

type RevtrServer interface {
	RunRevtr(context.Context, *RunRevtrReq) (*RunRevtrResp, error)
	GetRevtr(context.Context, *GetRevtrReq) (*GetRevtrResp, error)
	GetSources(context.Context, *GetSourcesReq) (*GetSourcesResp, error)
}

func RegisterRevtrServer(s *grpc.Server, srv RevtrServer) {
	s.RegisterService(&_Revtr_serviceDesc, srv)
}

func _Revtr_RunRevtr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RunRevtrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RevtrServer).RunRevtr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Revtr_GetRevtr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRevtrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RevtrServer).GetRevtr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Revtr_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetSourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RevtrServer).GetSources(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Revtr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Revtr",
	HandlerType: (*RevtrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunRevtr",
			Handler:    _Revtr_RunRevtr_Handler,
		},
		{
			MethodName: "GetRevtr",
			Handler:    _Revtr_GetRevtr_Handler,
		},
		{
			MethodName: "GetSources",
			Handler:    _Revtr_GetSources_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0xad, 0xa8, 0xfb, 0xe8, 0x46, 0xad, 0xed, 0x9a, 0x15, 0xdc, 0xd6, 0x20, 0xda, 0xc2, 0x10,
	0x60, 0x09, 0x55, 0x6e, 0x48, 0xde, 0x6c, 0x8b, 0x51, 0x12, 0x58, 0x92, 0x41, 0x52, 0x41, 0xec,
	0x17, 0x82, 0x92, 0xd6, 0x96, 0x10, 0x99, 0x64, 0xb8, 0x4b, 0x03, 0x41, 0x90, 0x97, 0xfc, 0x42,
	0x3e, 0x20, 0xbf, 0x14, 0x20, 0xbf, 0x90, 0xf7, 0xfc, 0x42, 0x86, 0x4b, 0xea, 0x42, 0x3b, 0x41,
	0xde, 0xb8, 0x67, 0x38, 0x67, 0xce, 0xce, 0x99, 0x59, 0x78, 0x7c, 0x35, 0xe7, 0xb3, 0x60, 0xdc,
	0x9a, 0xb8, 0xd7, 0xed, 0x81, 0x36, 0x3a, 0x34, 0x06, 0x46, 0x5b, 0xa7, 0x37, 0xd4, 0x67, 0xd4,
	0xf4, 0xed, 0x09, 0xf5, 0xdd, 0x80, 0xd3, 0xb6, 0x4f, 0x6f, 0xb8, 0xdf, 0xf6, 0xc6, 0xd1, 0x47,
	0xcb, 0xf3, 0x5d, 0xee, 0x12, 0xc9, 0x1b, 0x37, 0xf6, 0xae, 0x5c, 0xf7, 0x6a, 0x41, 0xdb, 0xb6,
	0x37, 0x6f, 0xdb, 0x8e, 0xe3, 0x72, 0x9b, 0xcf, 0x5d, 0x87, 0x45, 0x7f, 0xa8, 0x53, 0x90, 0xf5,
	0x30, 0xa1, 0x4f, 0x6d, 0x16, 0xf8, 0xf4, 0x9a, 0x3a, 0x9c, 0x94, 0x20, 0xcd, 0xfc, 0x89, 0x92,
	0xda, 0x4f, 0x1d, 0x14, 0xc3, 0xc3, 0x94, 0x71, 0x45, 0x12, 0x87, 0x3a, 0x14, 0x19, 0xb7, 0x17,
	0xd4, 0xa1, 0x8c, 0x29, 0x69, 0x84, 0x2a, 0x04, 0x40, 0x9a, 0x4f, 0x95, 0x8c, 0xf8, 0xde, 0x85,
	0xda, 0xd8, 0x9e, 0xbc, 0x76, 0x2f, 0x2f, 0x2d, 0xea, 0x4c, 0x67, 0x2e, 0xe6, 0x65, 0x31, 0x50,
	0x50, 0x8f, 0xa0, 0xa4, 0x07, 0x8e, 0x28, 0xa4, 0xd3, 0x37, 0xe4, 0x1f, 0xc8, 0x09, 0x95, 0x0c,
	0x6b, 0xa4, 0x0f, 0x4a, 0x9d, 0xed, 0x96, 0x37, 0x6e, 0xdd, 0x91, 0x51, 0x86, 0x8c, 0x1d, 0xf0,
	0x59, 0x54, 0x5a, 0xbd, 0x0f, 0xe5, 0x35, 0x05, 0xf3, 0x88, 0x0c, 0x85, 0xb1, 0xcd, 0x27, 0x33,
	0x0b, 0xab, 0xa7, 0x44, 0x75, 0x94, 0xe2, 0x53, 0x16, 0x2c, 0xb8, 0x15, 0xf8, 0x8b, 0x38, 0xeb,
	0x10, 0x4a, 0x3d, 0xca, 0x57, 0x85, 0xef, 0x26, 0x25, 0x8b, 0x3c, 0x80, 0xf2, 0xfa, 0x77, 0x2c,
	0xf2, 0xef, 0x2d, 0xa1, 0x3b, 0xb1, 0xd0, 0x64, 0xef, 0xd5, 0x3f, 0xa1, 0x82, 0x69, 0x86, 0x1b,
	0xf8, 0x13, 0xca, 0xc2, 0x3a, 0x4b, 0x56, 0xd1, 0x42, 0xb5, 0x09, 0xd5, 0xcd, 0x30, 0xf2, 0x2a,
	0x90, 0xc1, 0x0e, 0x2f, 0x59, 0x21, 0x64, 0x8d, 0xc2, 0xea, 0x7f, 0x90, 0x8b, 0xbe, 0x42, 0xad,
	0x61, 0x07, 0x1d, 0xfb, 0x9a, 0xc6, 0x56, 0x84, 0xad, 0xf6, 0x62, 0xa5, 0x9f, 0x53, 0x50, 0xbf,
	0x23, 0x84, 0xfc, 0x0d, 0x39, 0xf4, 0x87, 0x07, 0x4c, 0x64, 0x54, 0x3b, 0xb5, 0x55, 0x63, 0x0d,
	0x01, 0x2f, 0xad, 0x95, 0x36, 0xad, 0x4d, 0x8b, 0x43, 0x0d, 0xf2, 0x7e, 0xe0, 0xf0, 0x39, 0x56,
	0x0b, 0xcd, 0x4c, 0x87, 0x5e, 0xfb, 0xbe, 0x35, 0x67, 0x2c, 0xa0, 0x53, 0x61, 0x63, 0x36, 0x84,
	0x38, 0x5b, 0x42, 0x39, 0x01, 0x6d, 0x41, 0x89, 0x71, 0xd7, 0xb3, 0x7c, 0x34, 0xce, 0x75, 0x94,
	0xbc, 0xe0, 0xc2, 0xeb, 0x4f, 0x6d, 0x4e, 0x95, 0x82, 0x38, 0x35, 0x20, 0xe3, 0xd9, 0xd8, 0x8c,
	0xa2, 0xb8, 0x6c, 0x79, 0x25, 0xe9, 0x99, 0xeb, 0xc5, 0xd3, 0x03, 0xa1, 0x15, 0xea, 0x23, 0x28,
	0xac, 0x70, 0x94, 0x36, 0x73, 0xbd, 0xf8, 0xde, 0x7f, 0x41, 0x86, 0xbf, 0xf5, 0xa8, 0x50, 0x5d,
	0xed, 0xc8, 0x9b, 0x04, 0x26, 0xe2, 0xcd, 0x4f, 0x12, 0xce, 0xc6, 0x06, 0x40, 0x8a, 0x90, 0xed,
	0x8e, 0xfa, 0xfd, 0x73, 0xf9, 0x37, 0xd4, 0x57, 0xeb, 0x1a, 0xa6, 0xa5, 0x6b, 0x2f, 0x2d, 0x43,
	0xeb, 0xf5, 0xb5, 0x81, 0x29, 0xa7, 0x70, 0x4e, 0xb7, 0x42, 0xd0, 0x38, 0xef, 0x27, 0x02, 0x12,
	0xf9, 0x03, 0x76, 0x4c, 0xdd, 0x32, 0x87, 0x96, 0xa1, 0x9f, 0x24, 0x42, 0x69, 0x9c, 0xae, 0xaa,
	0xae, 0x27, 0xb0, 0x0c, 0xda, 0xb8, 0x6d, 0x9c, 0x0d, 0x87, 0x4f, 0xad, 0x5b, 0x91, 0x2c, 0xf9,
	0x1d, 0x88, 0x69, 0x58, 0x47, 0xdd, 0x17, 0x09, 0x3c, 0x47, 0xf6, 0x40, 0x89, 0x32, 0x7e, 0x10,
	0xcd, 0xe3, 0x5e, 0xec, 0xff, 0x2c, 0x1a, 0x42, 0x17, 0x9a, 0x3e, 0x94, 0x0b, 0xe4, 0x7f, 0x38,
	0xfc, 0xd5, 0x5f, 0x56, 0x77, 0x38, 0x3a, 0x3e, 0xd5, 0x2c, 0xc3, 0x3c, 0xea, 0x9f, 0xc9, 0xc5,
	0xe6, 0x43, 0xdc, 0xbf, 0xc4, 0x14, 0xe4, 0x45, 0x7f, 0xac, 0x57, 0xd8, 0x21, 0x3c, 0xe8, 0xa3,
	0xc1, 0xe0, 0xf9, 0xa0, 0x87, 0x9d, 0xa9, 0x40, 0xf1, 0x64, 0xd8, 0x3f, 0x3b, 0xd5, 0x4c, 0xad,
	0x2b, 0x4b, 0x9d, 0x6f, 0x29, 0xc8, 0x8a, 0x44, 0xd2, 0x43, 0x73, 0xe2, 0xf5, 0x23, 0xd1, 0x54,
	0xad, 0xf7, 0xb9, 0x21, 0x27, 0x01, 0xe6, 0xa9, 0xca, 0x87, 0x2f, 0x5f, 0x3f, 0x4a, 0x44, 0xad,
	0x88, 0x67, 0xe7, 0xa6, 0x13, 0xbd, 0x4a, 0x4f, 0x52, 0x4d, 0x32, 0x84, 0xc2, 0x72, 0xc5, 0x22,
	0xa2, 0x8d, 0xfd, 0x8c, 0x88, 0x36, 0x37, 0x50, 0xdd, 0x17, 0x44, 0x0d, 0xa2, 0x24, 0x88, 0xda,
	0xef, 0x96, 0x6b, 0xfc, 0x9e, 0x9c, 0x02, 0xac, 0xb7, 0x8b, 0xd4, 0x63, 0x86, 0xf5, 0x32, 0x36,
	0xc8, 0x6d, 0x08, 0x69, 0x77, 0x05, 0x6d, 0x9d, 0xd4, 0x96, 0xb4, 0x2c, 0x0a, 0x1e, 0x67, 0x2e,
	0xf0, 0xcd, 0x1c, 0xe7, 0xc4, 0xe3, 0x78, 0xef, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x69,
	0x9e, 0x40, 0x7b, 0x05, 0x00, 0x00,
}
