syntax = "proto3";

package pb;

option go_package = "pb";

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";

service Revtr {
  rpc RunRevtr(RunRevtrReq) returns (RunRevtrResp) {
    option(google.api.http) = {
      post: "/api/v2/revtr"
      body: "*"
    };
  }
  rpc GetRevtr(GetRevtrReq) returns (GetRevtrResp) {
    option(google.api.http) = {
      get: "/api/v2/revtr/{batch_id}",
    };
  }
  rpc GetSources(GetSourcesReq) returns (GetSourcesResp) {
    option(google.api.http) = {
      get: "/api/v2/sources",
    };
  }
}

message RevtrMeasurement {
    string src             = 1;
    string dst             = 2;
    uint32 staleness       = 3;
    uint32 id              = 4;
      bool backoff_endhost = 5;
}

message RunRevtrReq {
  repeated RevtrMeasurement revtrs  = 1;
  string auth = 2;
}

message RunRevtrResp {
  uint32 batch_id   =  1;
}

message GetRevtrReq {
  uint32 batch_id =  1;
  string auth = 2;
}

message GetRevtrResp {
  repeated ReverseTraceroute revtrs = 1; 
}

message GetSourcesReq {
  string auth = 1;
}

message GetSourcesResp {
  repeated Source srcs =  1;
}

message Source {
  string hostname =  1;
  string ip       =  2;
}

message ReverseTraceroute {
  RevtrStatus status     =  1; 
  string src             =  2;
  string dst             =  3;
  int64 runtime          =  4;
  string stop_reason     =  5;
  string date            =  6;
  repeated RevtrHop path =  7;
  uint32 id              =  8;
  string fail_reason     =  9;
  Stats stats            = 10;
}

message Stats {
  google.protobuf.Duration ts_duration               =  1;
  google.protobuf.Duration rr_duration               =  2;
  google.protobuf.Duration tr_to_src_duration        =  3;
  google.protobuf.Duration assume_symmetric_duration =  4;
  google.protobuf.Duration background_trs_duration   =  5;
  int32 rr_probes                    =  6;
  int32 spoofed_rr_probes            =  7;
  int32 ts_probes                    =  8;
  int32 spoofed_ts_probes            =  9;
  int32 rr_round_count               = 10;
  int32 ts_round_count               = 11; 
  int32 tr_to_src_round_count        = 12; 
  int32 assume_symmetric_round_count = 13;
  int32 background_trs_round_count   = 14;
}

message RevtrHop {  
    string hop        = 1;
    RevtrHopType type = 2;
}

enum RevtrHopType {
  DUMMY                                         = 0;
  DST_REV_SEGMENT                               = 1;
  DST_SYM_REV_SEGMENT                           = 2;
  TR_TO_SRC_REV_SEGMENT                         = 3;
  RR_REV_SEGMENT                                = 4;
  SPOOF_RR_REV_SEGMENT                          = 5;
  TS_ADJ_REV_SEGMENT                            = 6;
  SPOOF_TS_ADJ_REV_SEGMENT                      = 7;
  SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO              = 8;
  SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP = 9;
}

enum RevtrStatus {
  DUMMY_X     = 0;
  RUNNING     = 1;
  COMPLETED   = 2;
  CANCELED    = 3;
}

message RevtrUser {
  uint32 id    =  1;
  string name  =  2;
  string email =  3;
  uint32 max   =  4;
  uint32 delay =  5;
  string key   =  6; 
}