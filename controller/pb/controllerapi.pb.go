// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/controller/pb/controllerapi.proto
// DO NOT EDIT!

/*
Package controllerapi is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/controller/pb/controllerapi.proto

It has these top-level messages:
*/
package controllerapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import datamodel1 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel2 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel3 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel4 "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Controller service

type ControllerClient interface {
	Ping(ctx context.Context, in *datamodel1.PingArg, opts ...grpc.CallOption) (Controller_PingClient, error)
	Traceroute(ctx context.Context, in *datamodel2.TracerouteArg, opts ...grpc.CallOption) (Controller_TracerouteClient, error)
	GetVPs(ctx context.Context, in *datamodel3.VPRequest, opts ...grpc.CallOption) (*datamodel3.VPReturn, error)
	ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Ping(ctx context.Context, in *datamodel1.PingArg, opts ...grpc.CallOption) (Controller_PingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[0], c.cc, "/controllerapi.Controller/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_PingClient interface {
	Recv() (*datamodel1.Ping, error)
	grpc.ClientStream
}

type controllerPingClient struct {
	grpc.ClientStream
}

func (x *controllerPingClient) Recv() (*datamodel1.Ping, error) {
	m := new(datamodel1.Ping)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) Traceroute(ctx context.Context, in *datamodel2.TracerouteArg, opts ...grpc.CallOption) (Controller_TracerouteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[1], c.cc, "/controllerapi.Controller/Traceroute", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerTracerouteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_TracerouteClient interface {
	Recv() (*datamodel2.Traceroute, error)
	grpc.ClientStream
}

type controllerTracerouteClient struct {
	grpc.ClientStream
}

func (x *controllerTracerouteClient) Recv() (*datamodel2.Traceroute, error) {
	m := new(datamodel2.Traceroute)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetVPs(ctx context.Context, in *datamodel3.VPRequest, opts ...grpc.CallOption) (*datamodel3.VPReturn, error) {
	out := new(datamodel3.VPReturn)
	err := grpc.Invoke(ctx, "/controllerapi.Controller/GetVPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[2], c.cc, "/controllerapi.Controller/ReceiveSpoofedProbes", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerReceiveSpoofedProbesClient{stream}
	return x, nil
}

type Controller_ReceiveSpoofedProbesClient interface {
	Send(*datamodel4.Probe) error
	CloseAndRecv() (*datamodel4.ReceiveSpoofedProbesResponse, error)
	grpc.ClientStream
}

type controllerReceiveSpoofedProbesClient struct {
	grpc.ClientStream
}

func (x *controllerReceiveSpoofedProbesClient) Send(m *datamodel4.Probe) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesClient) CloseAndRecv() (*datamodel4.ReceiveSpoofedProbesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(datamodel4.ReceiveSpoofedProbesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	Ping(*datamodel1.PingArg, Controller_PingServer) error
	Traceroute(*datamodel2.TracerouteArg, Controller_TracerouteServer) error
	GetVPs(context.Context, *datamodel3.VPRequest) (*datamodel3.VPReturn, error)
	ReceiveSpoofedProbes(Controller_ReceiveSpoofedProbesServer) error
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel1.PingArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Ping(m, &controllerPingServer{stream})
}

type Controller_PingServer interface {
	Send(*datamodel1.Ping) error
	grpc.ServerStream
}

type controllerPingServer struct {
	grpc.ServerStream
}

func (x *controllerPingServer) Send(m *datamodel1.Ping) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_Traceroute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel2.TracerouteArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Traceroute(m, &controllerTracerouteServer{stream})
}

type Controller_TracerouteServer interface {
	Send(*datamodel2.Traceroute) error
	grpc.ServerStream
}

type controllerTracerouteServer struct {
	grpc.ServerStream
}

func (x *controllerTracerouteServer) Send(m *datamodel2.Traceroute) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_GetVPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datamodel3.VPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetVPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllerapi.Controller/GetVPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetVPs(ctx, req.(*datamodel3.VPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ReceiveSpoofedProbes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).ReceiveSpoofedProbes(&controllerReceiveSpoofedProbesServer{stream})
}

type Controller_ReceiveSpoofedProbesServer interface {
	SendAndClose(*datamodel4.ReceiveSpoofedProbesResponse) error
	Recv() (*datamodel4.Probe, error)
	grpc.ServerStream
}

type controllerReceiveSpoofedProbesServer struct {
	grpc.ServerStream
}

func (x *controllerReceiveSpoofedProbesServer) SendAndClose(m *datamodel4.ReceiveSpoofedProbesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesServer) Recv() (*datamodel4.Probe, error) {
	m := new(datamodel4.Probe)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controllerapi.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVPs",
			Handler:    _Controller_GetVPs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Controller_Ping_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Traceroute",
			Handler:       _Controller_Traceroute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveSpoofedProbes",
			Handler:       _Controller_ReceiveSpoofedProbes_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/NEU-SNS/ReverseTraceroute/controller/pb/controllerapi.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x5b, 0x84, 0x3a, 0x58, 0x42, 0x45, 0xa6, 0x48, 0x28, 0x63, 0x17, 0x58, 0x88, 0x11,
	0x88, 0x81, 0x01, 0xa1, 0x80, 0x80, 0xad, 0x8a, 0x12, 0xda, 0x81, 0xcd, 0x49, 0x8e, 0x10, 0x29,
	0xf5, 0x19, 0xfb, 0x92, 0xc7, 0xe0, 0x99, 0x49, 0xda, 0x2a, 0x75, 0xab, 0x0e, 0x64, 0xf4, 0xe7,
	0xfb, 0x3f, 0xdf, 0x9d, 0xcc, 0xde, 0xf2, 0x82, 0xbe, 0xab, 0xc4, 0x4f, 0x71, 0x29, 0x66, 0xaf,
	0xf3, 0xeb, 0x78, 0x16, 0x8b, 0x08, 0x6a, 0x30, 0x16, 0x3e, 0x8c, 0x4c, 0xc1, 0x60, 0x45, 0x20,
	0x52, 0x54, 0x64, 0xb0, 0x2c, 0xc1, 0x08, 0x9d, 0x38, 0x27, 0xa9, 0x0b, 0x5f, 0x1b, 0x24, 0xe4,
	0x27, 0x3b, 0xd0, 0x7b, 0xf8, 0x97, 0x36, 0x93, 0x24, 0x97, 0x98, 0x41, 0x29, 0x74, 0xa1, 0xf2,
	0xb5, 0xc9, 0x7b, 0xea, 0x19, 0xa5, 0x0e, 0x6e, 0x04, 0x41, 0x4f, 0x41, 0x2d, 0x15, 0xc9, 0x1c,
	0x34, 0x16, 0x8a, 0x36, 0x8a, 0xc7, 0x9e, 0x0a, 0x03, 0xa9, 0xd5, 0x88, 0x5f, 0xeb, 0xf8, 0xed,
	0xef, 0x11, 0x63, 0x2f, 0xdd, 0x3e, 0xb8, 0x60, 0xc7, 0x61, 0x33, 0x1f, 0xe7, 0x7e, 0x97, 0xf0,
	0x5b, 0x10, 0x98, 0xdc, 0x1b, 0xef, 0xb1, 0xe9, 0xe0, 0x66, 0xc8, 0x03, 0xc6, 0xb6, 0xcf, 0xf0,
	0x0b, 0xa7, 0x64, 0x8b, 0xdb, 0xf0, 0xf9, 0xc1, 0x9b, 0x95, 0xe2, 0x9e, 0x8d, 0xde, 0x81, 0x16,
	0xa1, 0xe5, 0x13, 0xa7, 0x68, 0x11, 0x46, 0xf0, 0x53, 0x81, 0x25, 0xef, 0x6c, 0x8f, 0x52, 0x65,
	0xd4, 0x74, 0xc0, 0xe7, 0x6c, 0x12, 0x41, 0x0a, 0x45, 0x0d, 0x71, 0x3b, 0x0f, 0x64, 0xa1, 0xc1,
	0x04, 0x2c, 0x3f, 0x75, 0xdb, 0x6c, 0x91, 0x77, 0xe9, 0x90, 0x43, 0x91, 0x08, 0x9a, 0x8d, 0x28,
	0xdb, 0x74, 0x73, 0x35, 0x7c, 0x1e, 0x7f, 0xee, 0xfe, 0x8f, 0x64, 0xb4, 0x5a, 0xd4, 0xdd, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xae, 0x8f, 0xe6, 0x7f, 0x02, 0x00, 0x00,
}
