// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/atlas/pb/atlas.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/atlas/pb/atlas.proto

It has these top-level messages:
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import datamodel "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Atlas service

type AtlasClient interface {
	GetIntersectingPath(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetIntersectingPathClient, error)
	GetPathsWithToken(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetPathsWithTokenClient, error)
}

type atlasClient struct {
	cc *grpc.ClientConn
}

func NewAtlasClient(cc *grpc.ClientConn) AtlasClient {
	return &atlasClient{cc}
}

func (c *atlasClient) GetIntersectingPath(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetIntersectingPathClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Atlas_serviceDesc.Streams[0], c.cc, "/pb.Atlas/GetIntersectingPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &atlasGetIntersectingPathClient{stream}
	return x, nil
}

type Atlas_GetIntersectingPathClient interface {
	Send(*datamodel.IntersectionRequest) error
	Recv() (*datamodel.IntersectionResponse, error)
	grpc.ClientStream
}

type atlasGetIntersectingPathClient struct {
	grpc.ClientStream
}

func (x *atlasGetIntersectingPathClient) Send(m *datamodel.IntersectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atlasGetIntersectingPathClient) Recv() (*datamodel.IntersectionResponse, error) {
	m := new(datamodel.IntersectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atlasClient) GetPathsWithToken(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetPathsWithTokenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Atlas_serviceDesc.Streams[1], c.cc, "/pb.Atlas/GetPathsWithToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &atlasGetPathsWithTokenClient{stream}
	return x, nil
}

type Atlas_GetPathsWithTokenClient interface {
	Send(*datamodel.TokenRequest) error
	Recv() (*datamodel.TokenResponse, error)
	grpc.ClientStream
}

type atlasGetPathsWithTokenClient struct {
	grpc.ClientStream
}

func (x *atlasGetPathsWithTokenClient) Send(m *datamodel.TokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atlasGetPathsWithTokenClient) Recv() (*datamodel.TokenResponse, error) {
	m := new(datamodel.TokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Atlas service

type AtlasServer interface {
	GetIntersectingPath(Atlas_GetIntersectingPathServer) error
	GetPathsWithToken(Atlas_GetPathsWithTokenServer) error
}

func RegisterAtlasServer(s *grpc.Server, srv AtlasServer) {
	s.RegisterService(&_Atlas_serviceDesc, srv)
}

func _Atlas_GetIntersectingPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtlasServer).GetIntersectingPath(&atlasGetIntersectingPathServer{stream})
}

type Atlas_GetIntersectingPathServer interface {
	Send(*datamodel.IntersectionResponse) error
	Recv() (*datamodel.IntersectionRequest, error)
	grpc.ServerStream
}

type atlasGetIntersectingPathServer struct {
	grpc.ServerStream
}

func (x *atlasGetIntersectingPathServer) Send(m *datamodel.IntersectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atlasGetIntersectingPathServer) Recv() (*datamodel.IntersectionRequest, error) {
	m := new(datamodel.IntersectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Atlas_GetPathsWithToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtlasServer).GetPathsWithToken(&atlasGetPathsWithTokenServer{stream})
}

type Atlas_GetPathsWithTokenServer interface {
	Send(*datamodel.TokenResponse) error
	Recv() (*datamodel.TokenRequest, error)
	grpc.ServerStream
}

type atlasGetPathsWithTokenServer struct {
	grpc.ServerStream
}

func (x *atlasGetPathsWithTokenServer) Send(m *datamodel.TokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atlasGetPathsWithTokenServer) Recv() (*datamodel.TokenRequest, error) {
	m := new(datamodel.TokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Atlas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Atlas",
	HandlerType: (*AtlasServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIntersectingPath",
			Handler:       _Atlas_GetIntersectingPath_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPathsWithToken",
			Handler:       _Atlas_GetPathsWithToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
