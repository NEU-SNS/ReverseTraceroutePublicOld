// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/atlas/pb/atlas.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/atlas/pb/atlas.proto

It has these top-level messages:
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import datamodel "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Atlas service

type AtlasClient interface {
	GetIntersectingPath(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetIntersectingPathClient, error)
	GetPathsWithToken(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetPathsWithTokenClient, error)
}

type atlasClient struct {
	cc *grpc.ClientConn
}

func NewAtlasClient(cc *grpc.ClientConn) AtlasClient {
	return &atlasClient{cc}
}

func (c *atlasClient) GetIntersectingPath(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetIntersectingPathClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Atlas_serviceDesc.Streams[0], c.cc, "/pb.Atlas/GetIntersectingPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &atlasGetIntersectingPathClient{stream}
	return x, nil
}

type Atlas_GetIntersectingPathClient interface {
	Send(*datamodel.IntersectionRequest) error
	Recv() (*datamodel.IntersectionResponse, error)
	grpc.ClientStream
}

type atlasGetIntersectingPathClient struct {
	grpc.ClientStream
}

func (x *atlasGetIntersectingPathClient) Send(m *datamodel.IntersectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atlasGetIntersectingPathClient) Recv() (*datamodel.IntersectionResponse, error) {
	m := new(datamodel.IntersectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atlasClient) GetPathsWithToken(ctx context.Context, opts ...grpc.CallOption) (Atlas_GetPathsWithTokenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Atlas_serviceDesc.Streams[1], c.cc, "/pb.Atlas/GetPathsWithToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &atlasGetPathsWithTokenClient{stream}
	return x, nil
}

type Atlas_GetPathsWithTokenClient interface {
	Send(*datamodel.TokenRequest) error
	Recv() (*datamodel.TokenResponse, error)
	grpc.ClientStream
}

type atlasGetPathsWithTokenClient struct {
	grpc.ClientStream
}

func (x *atlasGetPathsWithTokenClient) Send(m *datamodel.TokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atlasGetPathsWithTokenClient) Recv() (*datamodel.TokenResponse, error) {
	m := new(datamodel.TokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Atlas service

type AtlasServer interface {
	GetIntersectingPath(Atlas_GetIntersectingPathServer) error
	GetPathsWithToken(Atlas_GetPathsWithTokenServer) error
}

func RegisterAtlasServer(s *grpc.Server, srv AtlasServer) {
	s.RegisterService(&_Atlas_serviceDesc, srv)
}

func _Atlas_GetIntersectingPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtlasServer).GetIntersectingPath(&atlasGetIntersectingPathServer{stream})
}

type Atlas_GetIntersectingPathServer interface {
	Send(*datamodel.IntersectionResponse) error
	Recv() (*datamodel.IntersectionRequest, error)
	grpc.ServerStream
}

type atlasGetIntersectingPathServer struct {
	grpc.ServerStream
}

func (x *atlasGetIntersectingPathServer) Send(m *datamodel.IntersectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atlasGetIntersectingPathServer) Recv() (*datamodel.IntersectionRequest, error) {
	m := new(datamodel.IntersectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Atlas_GetPathsWithToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtlasServer).GetPathsWithToken(&atlasGetPathsWithTokenServer{stream})
}

type Atlas_GetPathsWithTokenServer interface {
	Send(*datamodel.TokenResponse) error
	Recv() (*datamodel.TokenRequest, error)
	grpc.ServerStream
}

type atlasGetPathsWithTokenServer struct {
	grpc.ServerStream
}

func (x *atlasGetPathsWithTokenServer) Send(m *datamodel.TokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atlasGetPathsWithTokenServer) Recv() (*datamodel.TokenRequest, error) {
	m := new(datamodel.TokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Atlas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Atlas",
	HandlerType: (*AtlasServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIntersectingPath",
			Handler:       _Atlas_GetIntersectingPath_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPathsWithToken",
			Handler:       _Atlas_GetPathsWithToken_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xf7, 0x73, 0x0d, 0xd5, 0x0d, 0xf6, 0x0b, 0xd6, 0x0f,
	0x4a, 0x2d, 0x4b, 0x2d, 0x2a, 0x4e, 0x0d, 0x29, 0x4a, 0x4c, 0x4e, 0x2d, 0xca, 0x2f, 0x2d, 0x49,
	0xd5, 0x4f, 0x2c, 0xc9, 0x49, 0x2c, 0xd6, 0x2f, 0x48, 0x82, 0x30, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x98, 0x0a, 0x92, 0xa4, 0x5c, 0x89, 0xd2, 0x9e, 0x92, 0x58, 0x92, 0x98, 0x9b, 0x9f,
	0x92, 0x9a, 0xa3, 0x9f, 0x99, 0x57, 0x02, 0x92, 0x4b, 0x2e, 0x29, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x81, 0x18, 0x65, 0xb4, 0x99, 0x91, 0x8b, 0xd5, 0x11, 0x64, 0xb4, 0x50, 0x0c, 0x97, 0xb0,
	0x7b, 0x6a, 0x89, 0x27, 0x4c, 0x59, 0x66, 0x5e, 0x7a, 0x40, 0x62, 0x49, 0x86, 0x90, 0x9c, 0x1e,
	0xdc, 0x0c, 0x3d, 0x84, 0x64, 0x7e, 0x5e, 0x10, 0xc4, 0x18, 0x29, 0x79, 0x9c, 0xf2, 0xc5, 0x05,
	0xf9, 0x79, 0xc5, 0xa9, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x42, 0x3e, 0x5c, 0x82, 0x40, 0xd3,
	0x41, 0x26, 0x16, 0x87, 0x03, 0x1d, 0x1e, 0x92, 0x9f, 0x9d, 0x9a, 0x27, 0x24, 0x8e, 0xa4, 0x17,
	0x2c, 0x02, 0x33, 0x54, 0x02, 0x53, 0x02, 0xd9, 0xb4, 0x24, 0x36, 0xb0, 0xe3, 0x8d, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x6b, 0xaf, 0x1a, 0xee, 0x44, 0x01, 0x00, 0x00,
}
