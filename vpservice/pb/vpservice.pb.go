// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/vpservice/pb/vpservice.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/vpservice/pb/vpservice.proto

It has these top-level messages:
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import datamodel "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for VPService service

type VPServiceClient interface {
	GetVPs(ctx context.Context, in *datamodel.VPRequest, opts ...grpc.CallOption) (*datamodel.VPReturn, error)
	GetSpoofers(ctx context.Context, in *datamodel.SpooferRequest, opts ...grpc.CallOption) (*datamodel.SpooferResponse, error)
}

type vPServiceClient struct {
	cc *grpc.ClientConn
}

func NewVPServiceClient(cc *grpc.ClientConn) VPServiceClient {
	return &vPServiceClient{cc}
}

func (c *vPServiceClient) GetVPs(ctx context.Context, in *datamodel.VPRequest, opts ...grpc.CallOption) (*datamodel.VPReturn, error) {
	out := new(datamodel.VPReturn)
	err := grpc.Invoke(ctx, "/pb.VPService/GetVPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPServiceClient) GetSpoofers(ctx context.Context, in *datamodel.SpooferRequest, opts ...grpc.CallOption) (*datamodel.SpooferResponse, error) {
	out := new(datamodel.SpooferResponse)
	err := grpc.Invoke(ctx, "/pb.VPService/GetSpoofers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VPService service

type VPServiceServer interface {
	GetVPs(context.Context, *datamodel.VPRequest) (*datamodel.VPReturn, error)
	GetSpoofers(context.Context, *datamodel.SpooferRequest) (*datamodel.SpooferResponse, error)
}

func RegisterVPServiceServer(s *grpc.Server, srv VPServiceServer) {
	s.RegisterService(&_VPService_serviceDesc, srv)
}

func _VPService_GetVPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(datamodel.VPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(VPServiceServer).GetVPs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _VPService_GetSpoofers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(datamodel.SpooferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(VPServiceServer).GetSpoofers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _VPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VPService",
	HandlerType: (*VPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVPs",
			Handler:    _VPService_GetVPs_Handler,
		},
		{
			MethodName: "GetSpoofers",
			Handler:    _VPService_GetSpoofers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x8e, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x03, 0x43, 0x24, 0xcc, 0x66, 0x58, 0xc8, 0x98, 0x1d, 0x5b, 0x02, 0xf1, 0x00, 0x0c,
	0xc0, 0x16, 0x45, 0x31, 0x64, 0xb7, 0x93, 0x23, 0x44, 0x22, 0x3e, 0xd7, 0x3e, 0xfb, 0x21, 0xfa,
	0xd4, 0x8d, 0x9a, 0xfe, 0x53, 0xd5, 0xa1, 0xe3, 0x7d, 0x77, 0xbf, 0xdf, 0x7d, 0xec, 0x7d, 0x18,
	0xe9, 0x2f, 0x1a, 0xd1, 0xe1, 0x24, 0xab, 0x8f, 0x9f, 0x67, 0x55, 0x29, 0xd9, 0x40, 0x02, 0x1f,
	0xe0, 0xdb, 0xeb, 0x0e, 0x3c, 0x46, 0x02, 0x99, 0x5c, 0x00, 0x9f, 0xc6, 0x0e, 0xa4, 0x33, 0xc7,
	0x41, 0x38, 0x8f, 0x84, 0xfc, 0xd6, 0x99, 0xe2, 0x3a, 0x4d, 0xaf, 0x49, 0x4f, 0xd8, 0xc3, 0xbf,
	0x4c, 0xda, 0x92, 0x1e, 0xc0, 0xe1, 0x68, 0x69, 0xd1, 0xbc, 0xac, 0x6f, 0xd8, 0x5d, 0x5b, 0xab,
	0x45, 0xcd, 0xdf, 0x58, 0xfe, 0x05, 0xd4, 0xd6, 0x81, 0x3f, 0x8a, 0x03, 0x26, 0xda, 0xba, 0x81,
	0x55, 0x84, 0x40, 0xc5, 0xc3, 0x59, 0x4a, 0xd1, 0xdb, 0x32, 0xe3, 0x9f, 0xec, 0x7e, 0xc6, 0x94,
	0x43, 0xfc, 0x9d, 0x7f, 0xf3, 0xa7, 0x93, 0xab, 0x5d, 0xb8, 0x17, 0x14, 0x97, 0x56, 0xc1, 0xa1,
	0x0d, 0x50, 0x66, 0x26, 0xdf, 0x76, 0x7a, 0xdd, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x06, 0x85,
	0x56, 0x1f, 0x01, 0x00, 0x00,
}
