// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/vpservice/pb/vpservice.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/vpservice/pb/vpservice.proto

It has these top-level messages:
	VantagePoint
	VPRequest
	VPReturn
	RRSpooferRequest
	RRSpooferResponse
	TSSpooferRequest
	TSSpooferResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VantagePoint struct {
	Ip          uint32 `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Hostname    string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Site        string `protobuf:"bytes,3,opt,name=site" json:"site,omitempty"`
	Timestamp   bool   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	RecordRoute bool   `protobuf:"varint,5,opt,name=record_route" json:"record_route,omitempty"`
	Spoof       bool   `protobuf:"varint,6,opt,name=spoof" json:"spoof,omitempty"`
	RecSpoof    bool   `protobuf:"varint,7,opt,name=rec_spoof" json:"rec_spoof,omitempty"`
	Ping        bool   `protobuf:"varint,8,opt,name=ping" json:"ping,omitempty"`
	Trace       bool   `protobuf:"varint,9,opt,name=trace" json:"trace,omitempty"`
}

func (m *VantagePoint) Reset()                    { *m = VantagePoint{} }
func (m *VantagePoint) String() string            { return proto.CompactTextString(m) }
func (*VantagePoint) ProtoMessage()               {}
func (*VantagePoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VPRequest struct {
}

func (m *VPRequest) Reset()                    { *m = VPRequest{} }
func (m *VPRequest) String() string            { return proto.CompactTextString(m) }
func (*VPRequest) ProtoMessage()               {}
func (*VPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type VPReturn struct {
	Vps []*VantagePoint `protobuf:"bytes,1,rep,name=vps" json:"vps,omitempty"`
}

func (m *VPReturn) Reset()                    { *m = VPReturn{} }
func (m *VPReturn) String() string            { return proto.CompactTextString(m) }
func (*VPReturn) ProtoMessage()               {}
func (*VPReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VPReturn) GetVps() []*VantagePoint {
	if m != nil {
		return m.Vps
	}
	return nil
}

type RRSpooferRequest struct {
	Addr uint32 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max  uint32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (m *RRSpooferRequest) Reset()                    { *m = RRSpooferRequest{} }
func (m *RRSpooferRequest) String() string            { return proto.CompactTextString(m) }
func (*RRSpooferRequest) ProtoMessage()               {}
func (*RRSpooferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RRSpooferResponse struct {
	Addr     uint32          `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max      uint32          `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	Spoofers []*VantagePoint `protobuf:"bytes,3,rep,name=spoofers" json:"spoofers,omitempty"`
}

func (m *RRSpooferResponse) Reset()                    { *m = RRSpooferResponse{} }
func (m *RRSpooferResponse) String() string            { return proto.CompactTextString(m) }
func (*RRSpooferResponse) ProtoMessage()               {}
func (*RRSpooferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RRSpooferResponse) GetSpoofers() []*VantagePoint {
	if m != nil {
		return m.Spoofers
	}
	return nil
}

type TSSpooferRequest struct {
	Addr uint32 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max  uint32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (m *TSSpooferRequest) Reset()                    { *m = TSSpooferRequest{} }
func (m *TSSpooferRequest) String() string            { return proto.CompactTextString(m) }
func (*TSSpooferRequest) ProtoMessage()               {}
func (*TSSpooferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type TSSpooferResponse struct {
	Addr     uint32          `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max      uint32          `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	Spoofers []*VantagePoint `protobuf:"bytes,3,rep,name=spoofers" json:"spoofers,omitempty"`
}

func (m *TSSpooferResponse) Reset()                    { *m = TSSpooferResponse{} }
func (m *TSSpooferResponse) String() string            { return proto.CompactTextString(m) }
func (*TSSpooferResponse) ProtoMessage()               {}
func (*TSSpooferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TSSpooferResponse) GetSpoofers() []*VantagePoint {
	if m != nil {
		return m.Spoofers
	}
	return nil
}

func init() {
	proto.RegisterType((*VantagePoint)(nil), "pb.VantagePoint")
	proto.RegisterType((*VPRequest)(nil), "pb.VPRequest")
	proto.RegisterType((*VPReturn)(nil), "pb.VPReturn")
	proto.RegisterType((*RRSpooferRequest)(nil), "pb.RRSpooferRequest")
	proto.RegisterType((*RRSpooferResponse)(nil), "pb.RRSpooferResponse")
	proto.RegisterType((*TSSpooferRequest)(nil), "pb.TSSpooferRequest")
	proto.RegisterType((*TSSpooferResponse)(nil), "pb.TSSpooferResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for VPService service

type VPServiceClient interface {
	GetVPs(ctx context.Context, in *VPRequest, opts ...grpc.CallOption) (*VPReturn, error)
	GetRRSpoofers(ctx context.Context, in *RRSpooferRequest, opts ...grpc.CallOption) (*RRSpooferResponse, error)
	GetTSSpoofers(ctx context.Context, in *TSSpooferRequest, opts ...grpc.CallOption) (*TSSpooferResponse, error)
}

type vPServiceClient struct {
	cc *grpc.ClientConn
}

func NewVPServiceClient(cc *grpc.ClientConn) VPServiceClient {
	return &vPServiceClient{cc}
}

func (c *vPServiceClient) GetVPs(ctx context.Context, in *VPRequest, opts ...grpc.CallOption) (*VPReturn, error) {
	out := new(VPReturn)
	err := grpc.Invoke(ctx, "/pb.VPService/GetVPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPServiceClient) GetRRSpoofers(ctx context.Context, in *RRSpooferRequest, opts ...grpc.CallOption) (*RRSpooferResponse, error) {
	out := new(RRSpooferResponse)
	err := grpc.Invoke(ctx, "/pb.VPService/GetRRSpoofers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPServiceClient) GetTSSpoofers(ctx context.Context, in *TSSpooferRequest, opts ...grpc.CallOption) (*TSSpooferResponse, error) {
	out := new(TSSpooferResponse)
	err := grpc.Invoke(ctx, "/pb.VPService/GetTSSpoofers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VPService service

type VPServiceServer interface {
	GetVPs(context.Context, *VPRequest) (*VPReturn, error)
	GetRRSpoofers(context.Context, *RRSpooferRequest) (*RRSpooferResponse, error)
	GetTSSpoofers(context.Context, *TSSpooferRequest) (*TSSpooferResponse, error)
}

func RegisterVPServiceServer(s *grpc.Server, srv VPServiceServer) {
	s.RegisterService(&_VPService_serviceDesc, srv)
}

func _VPService_GetVPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPServiceServer).GetVPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VPService/GetVPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPServiceServer).GetVPs(ctx, req.(*VPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPService_GetRRSpoofers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RRSpooferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPServiceServer).GetRRSpoofers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VPService/GetRRSpoofers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPServiceServer).GetRRSpoofers(ctx, req.(*RRSpooferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPService_GetTSSpoofers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSSpooferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPServiceServer).GetTSSpoofers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VPService/GetTSSpoofers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPServiceServer).GetTSSpoofers(ctx, req.(*TSSpooferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VPService",
	HandlerType: (*VPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVPs",
			Handler:    _VPService_GetVPs_Handler,
		},
		{
			MethodName: "GetRRSpoofers",
			Handler:    _VPService_GetRRSpoofers_Handler,
		},
		{
			MethodName: "GetTSSpoofers",
			Handler:    _VPService_GetTSSpoofers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/NEU-SNS/ReverseTraceroute/vpservice/pb/vpservice.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0xc1, 0xca, 0xda, 0x40,
	0x18, 0xfc, 0x63, 0x7e, 0x6d, 0xf2, 0x99, 0x80, 0x2e, 0x16, 0x16, 0xa1, 0x50, 0xf6, 0x52, 0x7b,
	0x30, 0x01, 0x7b, 0x2f, 0xf4, 0x50, 0x7a, 0x13, 0x49, 0xac, 0x57, 0x49, 0xe2, 0x57, 0xcd, 0x21,
	0xd9, 0xed, 0xee, 0x46, 0xfa, 0x3c, 0x7d, 0x86, 0x3e, 0x60, 0x77, 0x37, 0x6a, 0xc5, 0xd2, 0x42,
	0xa1, 0xc7, 0x19, 0x66, 0xf2, 0xcd, 0x4c, 0x16, 0x3e, 0x1c, 0x6b, 0x7d, 0xea, 0xca, 0xa4, 0xe2,
	0x4d, 0xba, 0xfe, 0xf8, 0x79, 0x99, 0xaf, 0xf3, 0x34, 0xc3, 0x33, 0x4a, 0x85, 0x5b, 0x59, 0x54,
	0x28, 0x79, 0xa7, 0x31, 0x3d, 0x0b, 0x85, 0xf2, 0x5c, 0x57, 0x98, 0x8a, 0xf2, 0x17, 0x48, 0x84,
	0xe4, 0x9a, 0x93, 0x81, 0x28, 0xd9, 0x77, 0x0f, 0xa2, 0x5d, 0xd1, 0xea, 0xe2, 0x88, 0x1b, 0x5e,
	0xb7, 0x9a, 0x00, 0x0c, 0x6a, 0x41, 0xbd, 0xd7, 0xde, 0x22, 0x26, 0x13, 0x08, 0x4e, 0x5c, 0xe9,
	0xb6, 0x68, 0x90, 0x0e, 0x0c, 0x13, 0x92, 0x08, 0x9e, 0x55, 0xad, 0x91, 0xfa, 0x0e, 0x4d, 0x21,
	0xd4, 0x75, 0x83, 0x4a, 0x17, 0x8d, 0xa0, 0xcf, 0x86, 0x0a, 0xc8, 0x0c, 0x22, 0x89, 0x15, 0x97,
	0x87, 0xbd, 0x0b, 0x40, 0x87, 0x8e, 0x8d, 0x61, 0xa8, 0x04, 0xe7, 0x5f, 0xe8, 0xc8, 0x41, 0xe3,
	0x33, 0xa2, 0x7d, 0x4f, 0xbd, 0x70, 0x94, 0xf9, 0xb0, 0xa8, 0xdb, 0x23, 0x0d, 0xae, 0x7a, 0x6d,
	0x4b, 0xd0, 0xd0, 0x42, 0x36, 0x86, 0x70, 0xb7, 0xc9, 0xf0, 0x6b, 0x67, 0x4e, 0xb1, 0xb7, 0x10,
	0x58, 0xa0, 0x3b, 0xd9, 0x92, 0x57, 0xe0, 0x9b, 0x52, 0x26, 0xad, 0xbf, 0x18, 0xaf, 0x26, 0x89,
	0x28, 0x93, 0xfb, 0x2e, 0x6c, 0x09, 0x93, 0x2c, 0xcb, 0xed, 0x15, 0x94, 0x17, 0xbb, 0x3d, 0x54,
	0x1c, 0x0e, 0xf2, 0xd2, 0x70, 0x0c, 0x7e, 0x53, 0x7c, 0x73, 0xe5, 0x62, 0x96, 0xc1, 0xf4, 0x4e,
	0x6e, 0xd2, 0xb5, 0x0a, 0xff, 0xa2, 0x27, 0x0c, 0x02, 0xd5, 0xab, 0x95, 0x19, 0xe4, 0x8f, 0x11,
	0xb6, 0xf9, 0x3f, 0x45, 0xb8, 0x93, 0xff, 0x97, 0x08, 0xab, 0x1f, 0x9e, 0x9d, 0x2f, 0xef, 0x7f,
	0x3d, 0x79, 0x03, 0xa3, 0x4f, 0xa8, 0x77, 0x1b, 0x45, 0x62, 0xa7, 0xbc, 0xee, 0x3a, 0x8f, 0xae,
	0xd0, 0x2e, 0xcb, 0x9e, 0xc8, 0x7b, 0x88, 0x8d, 0xf0, 0x36, 0x88, 0x22, 0x33, 0x2b, 0x78, 0xdc,
	0x73, 0xfe, 0xf2, 0x81, 0xed, 0x33, 0xdf, 0xfc, 0xb7, 0x36, 0x17, 0xff, 0xe3, 0x18, 0xbd, 0xff,
	0xb7, 0xce, 0xec, 0xa9, 0x1c, 0xb9, 0x47, 0xfa, 0xee, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90,
	0xfc, 0x5e, 0xed, 0xe9, 0x02, 0x00, 0x00,
}
