// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/vpservice/pb/vpservice.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/vpservice/pb/vpservice.proto

It has these top-level messages:
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import datamodel "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for VPService service

type VPServiceClient interface {
	GetVPs(ctx context.Context, in *datamodel.VPRequest, opts ...grpc.CallOption) (*datamodel.VPReturn, error)
}

type vPServiceClient struct {
	cc *grpc.ClientConn
}

func NewVPServiceClient(cc *grpc.ClientConn) VPServiceClient {
	return &vPServiceClient{cc}
}

func (c *vPServiceClient) GetVPs(ctx context.Context, in *datamodel.VPRequest, opts ...grpc.CallOption) (*datamodel.VPReturn, error) {
	out := new(datamodel.VPReturn)
	err := grpc.Invoke(ctx, "/pb.VPService/GetVPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VPService service

type VPServiceServer interface {
	GetVPs(context.Context, *datamodel.VPRequest) (*datamodel.VPReturn, error)
}

func RegisterVPServiceServer(s *grpc.Server, srv VPServiceServer) {
	s.RegisterService(&_VPService_serviceDesc, srv)
}

func _VPService_GetVPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(datamodel.VPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(VPServiceServer).GetVPs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _VPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VPService",
	HandlerType: (*VPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVPs",
			Handler:    _VPService_GetVPs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
