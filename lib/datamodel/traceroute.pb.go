/*
 Copyright (c) 2015, Northeastern University
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of the Northeastern University nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL Northeastern University BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/lib/datamodel/traceroute.proto
// DO NOT EDIT!

package datamodel

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type TracerouteArg struct {
	Service      ServiceT `protobuf:"varint,1,opt,name=service,enum=datamodel.ServiceT" json:"service,omitempty"`
	Host         string   `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Dst          string   `protobuf:"bytes,3,opt,name=dst" json:"dst,omitempty"`
	Confidence   string   `protobuf:"bytes,4,opt,name=confidence" json:"confidence,omitempty"`
	Dport        string   `protobuf:"bytes,5,opt,name=dport" json:"dport,omitempty"`
	FirstHop     string   `protobuf:"bytes,6,opt,name=first_hop" json:"first_hop,omitempty"`
	GapLimit     string   `protobuf:"bytes,7,opt,name=gap_limit" json:"gap_limit,omitempty"`
	GapAction    string   `protobuf:"bytes,8,opt,name=gap_action" json:"gap_action,omitempty"`
	MaxTtl       string   `protobuf:"bytes,9,opt,name=max_ttl" json:"max_ttl,omitempty"`
	PathDiscov   bool     `protobuf:"varint,10,opt,name=path_discov" json:"path_discov,omitempty"`
	Loops        string   `protobuf:"bytes,11,opt,name=loops" json:"loops,omitempty"`
	LoopAction   string   `protobuf:"bytes,12,opt,name=loop_action" json:"loop_action,omitempty"`
	Payload      string   `protobuf:"bytes,13,opt,name=payload" json:"payload,omitempty"`
	Method       string   `protobuf:"bytes,14,opt,name=method" json:"method,omitempty"`
	Attempts     string   `protobuf:"bytes,15,opt,name=attempts" json:"attempts,omitempty"`
	SendAll      bool     `protobuf:"varint,16,opt,name=send_all" json:"send_all,omitempty"`
	Sport        string   `protobuf:"bytes,17,opt,name=sport" json:"sport,omitempty"`
	Saddr        string   `protobuf:"bytes,18,opt,name=saddr" json:"saddr,omitempty"`
	Tos          string   `protobuf:"bytes,19,opt,name=tos" json:"tos,omitempty"`
	TimeExceeded bool     `protobuf:"varint,20,opt,name=time_exceeded" json:"time_exceeded,omitempty"`
	UserId       string   `protobuf:"bytes,21,opt,name=user_id" json:"user_id,omitempty"`
	Wait         string   `protobuf:"bytes,22,opt,name=wait" json:"wait,omitempty"`
	WaitProbe    string   `protobuf:"bytes,23,opt,name=wait_probe" json:"wait_probe,omitempty"`
	GssEntry     string   `protobuf:"bytes,24,opt,name=gss_entry" json:"gss_entry,omitempty"`
	LssName      string   `protobuf:"bytes,25,opt,name=lss_name" json:"lss_name,omitempty"`
}

func (m *TracerouteArg) Reset()         { *m = TracerouteArg{} }
func (m *TracerouteArg) String() string { return proto.CompactTextString(m) }
func (*TracerouteArg) ProtoMessage()    {}

type TracerouteHop struct {
	Addr      string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	ProbeTtl  int32   `protobuf:"varint,2,opt,name=probe_ttl" json:"probe_ttl,omitempty"`
	ProbeId   int32   `protobuf:"varint,3,opt,name=probe_id" json:"probe_id,omitempty"`
	ProbeSize int32   `protobuf:"varint,4,opt,name=probe_size" json:"probe_size,omitempty"`
	Rtt       float32 `protobuf:"fixed32,5,opt,name=rtt" json:"rtt,omitempty"`
	ReplyTtl  int32   `protobuf:"varint,6,opt,name=reply_ttl" json:"reply_ttl,omitempty"`
	ReplyTos  int32   `protobuf:"varint,7,opt,name=reply_tos" json:"reply_tos,omitempty"`
	ReplySize int32   `protobuf:"varint,8,opt,name=reply_size" json:"reply_size,omitempty"`
	ReplyIpId int32   `protobuf:"varint,9,opt,name=reply_ip_id" json:"reply_ip_id,omitempty"`
	IcmpType  int32   `protobuf:"varint,10,opt,name=icmp_type" json:"icmp_type,omitempty"`
	IcmpCode  int32   `protobuf:"varint,11,opt,name=icmp_code" json:"icmp_code,omitempty"`
	IcmpQTtl  int32   `protobuf:"varint,12,opt,name=icmp_q_ttl" json:"icmp_q_ttl,omitempty"`
	IcmpQIpl  int32   `protobuf:"varint,13,opt,name=icmp_q_ipl" json:"icmp_q_ipl,omitempty"`
	IcmpQTos  int32   `protobuf:"varint,14,opt,name=icmp_q_tos" json:"icmp_q_tos,omitempty"`
}

func (m *TracerouteHop) Reset()         { *m = TracerouteHop{} }
func (m *TracerouteHop) String() string { return proto.CompactTextString(m) }
func (*TracerouteHop) ProtoMessage()    {}

type Traceroute struct {
	Version    string           `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Type       string           `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	UserId     int32            `protobuf:"varint,3,opt,name=user_id" json:"user_id,omitempty"`
	Method     string           `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Src        string           `protobuf:"bytes,5,opt,name=src" json:"src,omitempty"`
	Dst        string           `protobuf:"bytes,6,opt,name=dst" json:"dst,omitempty"`
	Sport      int32            `protobuf:"varint,7,opt,name=sport" json:"sport,omitempty"`
	Dport      int32            `protobuf:"varint,8,opt,name=dport" json:"dport,omitempty"`
	StopReason string           `protobuf:"bytes,9,opt,name=stop_reason" json:"stop_reason,omitempty"`
	StopData   int32            `protobuf:"varint,10,opt,name=stop_data" json:"stop_data,omitempty"`
	Start      *TracerouteTime  `protobuf:"bytes,11,opt,name=start" json:"start,omitempty"`
	HopCount   int32            `protobuf:"varint,12,opt,name=hop_count" json:"hop_count,omitempty"`
	Attempts   int32            `protobuf:"varint,13,opt,name=attempts" json:"attempts,omitempty"`
	HopLimit   int32            `protobuf:"varint,14,opt,name=hop_limit" json:"hop_limit,omitempty"`
	FirstHop   int32            `protobuf:"varint,15,opt,name=first_hop" json:"first_hop,omitempty"`
	Wait       int32            `protobuf:"varint,16,opt,name=wait" json:"wait,omitempty"`
	WaitProbe  int32            `protobuf:"varint,17,opt,name=wait_probe" json:"wait_probe,omitempty"`
	Tos        int32            `protobuf:"varint,18,opt,name=tos" json:"tos,omitempty"`
	ProbeSize  int32            `protobuf:"varint,19,opt,name=probe_size" json:"probe_size,omitempty"`
	Hops       []*TracerouteHop `protobuf:"bytes,20,rep,name=hops" json:"hops,omitempty"`
}

func (m *Traceroute) Reset()         { *m = Traceroute{} }
func (m *Traceroute) String() string { return proto.CompactTextString(m) }
func (*Traceroute) ProtoMessage()    {}

func (m *Traceroute) GetStart() *TracerouteTime {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Traceroute) GetHops() []*TracerouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

type TracerouteTime struct {
	Sec   int64  `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	Usec  int64  `protobuf:"varint,2,opt,name=usec" json:"usec,omitempty"`
	Ftime string `protobuf:"bytes,3,opt,name=ftime" json:"ftime,omitempty"`
}

func (m *TracerouteTime) Reset()         { *m = TracerouteTime{} }
func (m *TracerouteTime) String() string { return proto.CompactTextString(m) }
func (*TracerouteTime) ProtoMessage()    {}

type TracerouteReturn struct {
	Ret        *ReturnT    `protobuf:"bytes,1,opt,name=ret" json:"ret,omitempty"`
	Traceroute *Traceroute `protobuf:"bytes,2,opt,name=traceroute" json:"traceroute,omitempty"`
}

func (m *TracerouteReturn) Reset()         { *m = TracerouteReturn{} }
func (m *TracerouteReturn) String() string { return proto.CompactTextString(m) }
func (*TracerouteReturn) ProtoMessage()    {}

func (m *TracerouteReturn) GetRet() *ReturnT {
	if m != nil {
		return m.Ret
	}
	return nil
}

func (m *TracerouteReturn) GetTraceroute() *Traceroute {
	if m != nil {
		return m.Traceroute
	}
	return nil
}

func init() {
}
