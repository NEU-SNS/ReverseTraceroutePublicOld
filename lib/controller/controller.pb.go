// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/lib/controller/controller.proto
// DO NOT EDIT!

/*
Package controller is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/lib/controller/controller.proto

It has these top-level messages:
*/
package controller

import proto "github.com/golang/protobuf/proto"
import datamodel1 "github.com/NEU-SNS/ReverseTraceroute/lib/datamodel"
import datamodel3 "github.com/NEU-SNS/ReverseTraceroute/lib/datamodel"
import datamodel4 "github.com/NEU-SNS/ReverseTraceroute/lib/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

func init() {
}

// Client API for Controller service

type ControllerClient interface {
	Ping(ctx context.Context, in *datamodel3.PingArg, opts ...grpc.CallOption) (*datamodel3.PingReturn, error)
	Traceroute(ctx context.Context, in *datamodel4.TracerouteArg, opts ...grpc.CallOption) (*datamodel4.TracerouteReturn, error)
	Stats(ctx context.Context, in *datamodel1.StatsArg, opts ...grpc.CallOption) (*datamodel1.StatsReturn, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Ping(ctx context.Context, in *datamodel3.PingArg, opts ...grpc.CallOption) (*datamodel3.PingReturn, error) {
	out := new(datamodel3.PingReturn)
	err := grpc.Invoke(ctx, "/.Controller/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Traceroute(ctx context.Context, in *datamodel4.TracerouteArg, opts ...grpc.CallOption) (*datamodel4.TracerouteReturn, error) {
	out := new(datamodel4.TracerouteReturn)
	err := grpc.Invoke(ctx, "/.Controller/Traceroute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Stats(ctx context.Context, in *datamodel1.StatsArg, opts ...grpc.CallOption) (*datamodel1.StatsReturn, error) {
	out := new(datamodel1.StatsReturn)
	err := grpc.Invoke(ctx, "/.Controller/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	Ping(context.Context, *datamodel3.PingArg) (*datamodel3.PingReturn, error)
	Traceroute(context.Context, *datamodel4.TracerouteArg) (*datamodel4.TracerouteReturn, error)
	Stats(context.Context, *datamodel1.StatsArg) (*datamodel1.StatsReturn, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Ping_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel3.PingArg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Controller_Traceroute_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel4.TracerouteArg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).Traceroute(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Controller_Stats_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel1.StatsArg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).Stats(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Controller_Ping_Handler,
		},
		{
			MethodName: "Traceroute",
			Handler:    _Controller_Traceroute_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Controller_Stats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
