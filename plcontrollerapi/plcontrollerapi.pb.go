/*
Copyright (c) 2015, Northeastern University
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of the Northeastern University nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL Northeastern University BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/plcontrollerapi/plcontrollerapi.proto
// DO NOT EDIT!

/*
Package plcontrollerapi is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/plcontrollerapi/plcontrollerapi.proto

It has these top-level messages:
*/
package plcontrollerapi

import proto "github.com/golang/protobuf/proto"
import datamodel3 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel4 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel5 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel6 "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

func init() {
}

// Client API for PLController service

type PLControllerClient interface {
	Ping(ctx context.Context, in *datamodel3.PingArg, opts ...grpc.CallOption) (*datamodel3.Ping, error)
	Traceroute(ctx context.Context, in *datamodel4.TracerouteArg, opts ...grpc.CallOption) (*datamodel4.Traceroute, error)
	ReceiveSpoof(ctx context.Context, in *datamodel6.RecSpoof, opts ...grpc.CallOption) (*datamodel6.NotifyRecSpoofResponse, error)
	GetVPs(ctx context.Context, in *datamodel5.VPRequest, opts ...grpc.CallOption) (*datamodel5.VPReturn, error)
}

type pLControllerClient struct {
	cc *grpc.ClientConn
}

func NewPLControllerClient(cc *grpc.ClientConn) PLControllerClient {
	return &pLControllerClient{cc}
}

func (c *pLControllerClient) Ping(ctx context.Context, in *datamodel3.PingArg, opts ...grpc.CallOption) (*datamodel3.Ping, error) {
	out := new(datamodel3.Ping)
	err := grpc.Invoke(ctx, "/.PLController/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLControllerClient) Traceroute(ctx context.Context, in *datamodel4.TracerouteArg, opts ...grpc.CallOption) (*datamodel4.Traceroute, error) {
	out := new(datamodel4.Traceroute)
	err := grpc.Invoke(ctx, "/.PLController/Traceroute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLControllerClient) ReceiveSpoof(ctx context.Context, in *datamodel6.RecSpoof, opts ...grpc.CallOption) (*datamodel6.NotifyRecSpoofResponse, error) {
	out := new(datamodel6.NotifyRecSpoofResponse)
	err := grpc.Invoke(ctx, "/.PLController/ReceiveSpoof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pLControllerClient) GetVPs(ctx context.Context, in *datamodel5.VPRequest, opts ...grpc.CallOption) (*datamodel5.VPReturn, error) {
	out := new(datamodel5.VPReturn)
	err := grpc.Invoke(ctx, "/.PLController/GetVPs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PLController service

type PLControllerServer interface {
	Ping(context.Context, *datamodel3.PingArg) (*datamodel3.Ping, error)
	Traceroute(context.Context, *datamodel4.TracerouteArg) (*datamodel4.Traceroute, error)
	ReceiveSpoof(context.Context, *datamodel6.RecSpoof) (*datamodel6.NotifyRecSpoofResponse, error)
	GetVPs(context.Context, *datamodel5.VPRequest) (*datamodel5.VPReturn, error)
}

func RegisterPLControllerServer(s *grpc.Server, srv PLControllerServer) {
	s.RegisterService(&_PLController_serviceDesc, srv)
}

func _PLController_Ping_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel3.PingArg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PLControllerServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PLController_Traceroute_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel4.TracerouteArg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PLControllerServer).Traceroute(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PLController_ReceiveSpoof_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel6.RecSpoof)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PLControllerServer).ReceiveSpoof(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PLController_GetVPs_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(datamodel5.VPRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PLControllerServer).GetVPs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PLController_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".PLController",
	HandlerType: (*PLControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PLController_Ping_Handler,
		},
		{
			MethodName: "Traceroute",
			Handler:    _PLController_Traceroute_Handler,
		},
		{
			MethodName: "ReceiveSpoof",
			Handler:    _PLController_ReceiveSpoof_Handler,
		},
		{
			MethodName: "GetVPs",
			Handler:    _PLController_GetVPs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
