// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/datamodel/traceroute.proto
// DO NOT EDIT!

package datamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TracerouteMeasurement struct {
	Staleness    int64  `protobuf:"varint,1,opt,name=staleness" json:"staleness,omitempty"`
	Dst          uint32 `protobuf:"varint,3,opt,name=dst" json:"dst,omitempty"`
	Confidence   string `protobuf:"bytes,4,opt,name=confidence" json:"confidence,omitempty"`
	Dport        string `protobuf:"bytes,5,opt,name=dport" json:"dport,omitempty"`
	FirstHop     string `protobuf:"bytes,6,opt,name=first_hop" json:"first_hop,omitempty"`
	GapLimit     string `protobuf:"bytes,7,opt,name=gap_limit" json:"gap_limit,omitempty"`
	GapAction    string `protobuf:"bytes,8,opt,name=gap_action" json:"gap_action,omitempty"`
	MaxTtl       string `protobuf:"bytes,9,opt,name=max_ttl" json:"max_ttl,omitempty"`
	PathDiscov   bool   `protobuf:"varint,10,opt,name=path_discov" json:"path_discov,omitempty"`
	Loops        string `protobuf:"bytes,11,opt,name=loops" json:"loops,omitempty"`
	LoopAction   string `protobuf:"bytes,12,opt,name=loop_action" json:"loop_action,omitempty"`
	Payload      string `protobuf:"bytes,13,opt,name=payload" json:"payload,omitempty"`
	Method       string `protobuf:"bytes,14,opt,name=method" json:"method,omitempty"`
	Attempts     string `protobuf:"bytes,15,opt,name=attempts" json:"attempts,omitempty"`
	SendAll      bool   `protobuf:"varint,16,opt,name=send_all" json:"send_all,omitempty"`
	Sport        string `protobuf:"bytes,17,opt,name=sport" json:"sport,omitempty"`
	Src          uint32 `protobuf:"varint,18,opt,name=src" json:"src,omitempty"`
	Tos          string `protobuf:"bytes,19,opt,name=tos" json:"tos,omitempty"`
	TimeExceeded bool   `protobuf:"varint,20,opt,name=time_exceeded" json:"time_exceeded,omitempty"`
	UserId       string `protobuf:"bytes,21,opt,name=user_id" json:"user_id,omitempty"`
	Wait         string `protobuf:"bytes,22,opt,name=wait" json:"wait,omitempty"`
	WaitProbe    string `protobuf:"bytes,23,opt,name=wait_probe" json:"wait_probe,omitempty"`
	GssEntry     string `protobuf:"bytes,24,opt,name=gss_entry" json:"gss_entry,omitempty"`
	LssName      string `protobuf:"bytes,25,opt,name=lss_name" json:"lss_name,omitempty"`
	Timeout      int64  `protobuf:"varint,26,opt,name=timeout" json:"timeout,omitempty"`
	CheckCache   bool   `protobuf:"varint,27,opt,name=check_cache" json:"check_cache,omitempty"`
	CheckDb      bool   `protobuf:"varint,28,opt,name=check_db" json:"check_db,omitempty"`
}

func (m *TracerouteMeasurement) Reset()                    { *m = TracerouteMeasurement{} }
func (m *TracerouteMeasurement) String() string            { return proto.CompactTextString(m) }
func (*TracerouteMeasurement) ProtoMessage()               {}
func (*TracerouteMeasurement) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type TracerouteArg struct {
	Traceroutes []*TracerouteMeasurement `protobuf:"bytes,1,rep,name=traceroutes" json:"traceroutes,omitempty"`
}

func (m *TracerouteArg) Reset()                    { *m = TracerouteArg{} }
func (m *TracerouteArg) String() string            { return proto.CompactTextString(m) }
func (*TracerouteArg) ProtoMessage()               {}
func (*TracerouteArg) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *TracerouteArg) GetTraceroutes() []*TracerouteMeasurement {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type TracerouteHop struct {
	Addr      uint32 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	ProbeTtl  uint32 `protobuf:"varint,2,opt,name=probe_ttl" json:"probe_ttl,omitempty"`
	ProbeId   uint32 `protobuf:"varint,3,opt,name=probe_id" json:"probe_id,omitempty"`
	ProbeSize uint32 `protobuf:"varint,4,opt,name=probe_size" json:"probe_size,omitempty"`
	Rtt       *RTT   `protobuf:"bytes,5,opt,name=rtt" json:"rtt,omitempty"`
	ReplyTtl  uint32 `protobuf:"varint,6,opt,name=reply_ttl" json:"reply_ttl,omitempty"`
	ReplyTos  uint32 `protobuf:"varint,7,opt,name=reply_tos" json:"reply_tos,omitempty"`
	ReplySize uint32 `protobuf:"varint,8,opt,name=reply_size" json:"reply_size,omitempty"`
	ReplyIpid uint32 `protobuf:"varint,9,opt,name=reply_ipid" json:"reply_ipid,omitempty"`
	IcmpType  uint32 `protobuf:"varint,10,opt,name=icmp_type" json:"icmp_type,omitempty"`
	IcmpCode  uint32 `protobuf:"varint,11,opt,name=icmp_code" json:"icmp_code,omitempty"`
	IcmpQTtl  uint32 `protobuf:"varint,12,opt,name=icmp_q_ttl" json:"icmp_q_ttl,omitempty"`
	IcmpQIpl  uint32 `protobuf:"varint,13,opt,name=icmp_q_ipl" json:"icmp_q_ipl,omitempty"`
	IcmpQTos  uint32 `protobuf:"varint,14,opt,name=icmp_q_tos" json:"icmp_q_tos,omitempty"`
}

func (m *TracerouteHop) Reset()                    { *m = TracerouteHop{} }
func (m *TracerouteHop) String() string            { return proto.CompactTextString(m) }
func (*TracerouteHop) ProtoMessage()               {}
func (*TracerouteHop) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *TracerouteHop) GetRtt() *RTT {
	if m != nil {
		return m.Rtt
	}
	return nil
}

type Traceroute struct {
	Type       string           `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	UserId     uint32           `protobuf:"varint,2,opt,name=user_id" json:"user_id,omitempty"`
	Method     string           `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Src        uint32           `protobuf:"varint,4,opt,name=src" json:"src,omitempty"`
	Dst        uint32           `protobuf:"varint,5,opt,name=dst" json:"dst,omitempty"`
	Sport      uint32           `protobuf:"varint,6,opt,name=sport" json:"sport,omitempty"`
	Dport      uint32           `protobuf:"varint,7,opt,name=dport" json:"dport,omitempty"`
	StopReason string           `protobuf:"bytes,8,opt,name=stop_reason" json:"stop_reason,omitempty"`
	StopData   uint32           `protobuf:"varint,9,opt,name=stop_data" json:"stop_data,omitempty"`
	Start      *TracerouteTime  `protobuf:"bytes,10,opt,name=start" json:"start,omitempty"`
	HopCount   uint32           `protobuf:"varint,11,opt,name=hop_count" json:"hop_count,omitempty"`
	Attempts   uint32           `protobuf:"varint,12,opt,name=attempts" json:"attempts,omitempty"`
	Hoplimit   uint32           `protobuf:"varint,13,opt,name=hoplimit" json:"hoplimit,omitempty"`
	Firsthop   uint32           `protobuf:"varint,14,opt,name=firsthop" json:"firsthop,omitempty"`
	Wait       uint32           `protobuf:"varint,15,opt,name=wait" json:"wait,omitempty"`
	WaitProbe  uint32           `protobuf:"varint,16,opt,name=wait_probe" json:"wait_probe,omitempty"`
	Tos        uint32           `protobuf:"varint,17,opt,name=tos" json:"tos,omitempty"`
	ProbeSize  uint32           `protobuf:"varint,18,opt,name=probe_size" json:"probe_size,omitempty"`
	Hops       []*TracerouteHop `protobuf:"bytes,19,rep,name=hops" json:"hops,omitempty"`
	Error      string           `protobuf:"bytes,20,opt,name=error" json:"error,omitempty"`
	Version    string           `protobuf:"bytes,21,opt,name=version" json:"version,omitempty"`
}

func (m *Traceroute) Reset()                    { *m = Traceroute{} }
func (m *Traceroute) String() string            { return proto.CompactTextString(m) }
func (*Traceroute) ProtoMessage()               {}
func (*Traceroute) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *Traceroute) GetStart() *TracerouteTime {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Traceroute) GetHops() []*TracerouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

type TracerouteTime struct {
	Sec   int64  `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	Usec  int64  `protobuf:"varint,2,opt,name=usec" json:"usec,omitempty"`
	Ftime string `protobuf:"bytes,3,opt,name=ftime" json:"ftime,omitempty"`
}

func (m *TracerouteTime) Reset()                    { *m = TracerouteTime{} }
func (m *TracerouteTime) String() string            { return proto.CompactTextString(m) }
func (*TracerouteTime) ProtoMessage()               {}
func (*TracerouteTime) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func init() {
	proto.RegisterType((*TracerouteMeasurement)(nil), "datamodel.TracerouteMeasurement")
	proto.RegisterType((*TracerouteArg)(nil), "datamodel.TracerouteArg")
	proto.RegisterType((*TracerouteHop)(nil), "datamodel.TracerouteHop")
	proto.RegisterType((*Traceroute)(nil), "datamodel.Traceroute")
	proto.RegisterType((*TracerouteTime)(nil), "datamodel.TracerouteTime")
}

var fileDescriptor6 = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x55, 0xbb, 0x69, 0x9a, 0x38, 0xd9, 0xb4, 0xdd, 0x52, 0x70, 0x5b, 0x0e, 0x55, 0x0e, 0xa8,
	0x17, 0x12, 0xa9, 0x88, 0x03, 0x5c, 0x10, 0x48, 0x20, 0x2e, 0xf4, 0xd0, 0x86, 0x0b, 0x97, 0x95,
	0xb3, 0x9e, 0x36, 0x2b, 0x76, 0xd7, 0xc6, 0x76, 0x4a, 0xc3, 0x9f, 0x70, 0xe6, 0x13, 0xf9, 0x01,
	0xc6, 0xb3, 0xf1, 0x26, 0xad, 0x72, 0xe1, 0xb4, 0x9a, 0xb7, 0xf6, 0x8c, 0xe7, 0xcd, 0x7b, 0xc3,
	0xde, 0xdd, 0xe6, 0x6e, 0x36, 0x9f, 0x8e, 0x32, 0x55, 0x8e, 0x2f, 0x3f, 0x7e, 0x7d, 0x79, 0x7d,
	0x79, 0x3d, 0xbe, 0x82, 0x3b, 0x30, 0x16, 0x26, 0x46, 0x64, 0x60, 0xd4, 0xdc, 0xc1, 0x58, 0x0a,
	0x27, 0x4a, 0x25, 0xa1, 0x18, 0xbb, 0x06, 0x1c, 0x69, 0xa3, 0x9c, 0x4a, 0xba, 0xcd, 0xbf, 0x93,
	0x37, 0xff, 0x9b, 0x2b, 0x2f, 0x97, 0x59, 0x86, 0x7f, 0x23, 0x76, 0xb4, 0x3a, 0xf3, 0x05, 0x84,
	0x9d, 0x1b, 0x28, 0xa1, 0x72, 0xc9, 0x01, 0xeb, 0x5a, 0x27, 0x0a, 0xa8, 0xc0, 0x5a, 0xbe, 0x75,
	0xb6, 0x75, 0x1e, 0x25, 0x3d, 0x16, 0x49, 0xeb, 0x78, 0x84, 0x41, 0x9c, 0x24, 0x8c, 0x65, 0xaa,
	0xba, 0xc9, 0x25, 0x54, 0x19, 0xf0, 0x16, 0x62, 0xdd, 0x24, 0x66, 0x3b, 0x52, 0x2b, 0xe3, 0xf8,
	0x0e, 0x85, 0x98, 0xe2, 0x26, 0x37, 0xd6, 0xa5, 0x33, 0xa5, 0x79, 0x3b, 0x40, 0xb7, 0x42, 0xa7,
	0x45, 0x5e, 0xe6, 0x8e, 0xef, 0x12, 0x84, 0x89, 0x3c, 0x24, 0x32, 0x97, 0xab, 0x8a, 0x77, 0x08,
	0xdb, 0x63, 0xbb, 0xa5, 0xb8, 0x4f, 0x9d, 0x2b, 0x78, 0x97, 0x80, 0x43, 0xd6, 0xd3, 0xc2, 0xcd,
	0x52, 0x99, 0xdb, 0x4c, 0xdd, 0x71, 0x86, 0x60, 0xc7, 0x97, 0x2b, 0x94, 0xd2, 0x96, 0xf7, 0xc2,
	0x19, 0x1f, 0x86, 0x4c, 0xfd, 0x90, 0x49, 0x8b, 0x45, 0xa1, 0x84, 0xe4, 0x31, 0x01, 0x03, 0xd6,
	0x2e, 0xc1, 0xcd, 0x94, 0xe4, 0x03, 0x8a, 0xf7, 0x59, 0x47, 0x38, 0x07, 0xa5, 0x76, 0x96, 0xef,
	0x05, 0xc4, 0x42, 0x25, 0x53, 0x51, 0x14, 0x7c, 0x3f, 0x14, 0xb2, 0xd4, 0xd7, 0x01, 0x1d, 0x40,
	0x1e, 0xac, 0xc9, 0x78, 0x42, 0x3c, 0x60, 0xe0, 0x94, 0xe5, 0x87, 0xf4, 0xe7, 0x88, 0xc5, 0x9e,
	0xdc, 0x14, 0xee, 0x33, 0x00, 0x09, 0x92, 0x3f, 0xa1, 0xfb, 0xf8, 0x88, 0xb9, 0x05, 0x93, 0xe6,
	0x92, 0x1f, 0xd1, 0xb9, 0x3e, 0x6b, 0xfd, 0x14, 0xc8, 0xc0, 0xd3, 0xc0, 0x80, 0x8f, 0x52, 0x1c,
	0xc9, 0x14, 0xf8, 0xb3, 0x86, 0x28, 0x6b, 0x53, 0x9c, 0x84, 0x59, 0x70, 0x1e, 0xde, 0x55, 0x20,
	0x54, 0x89, 0x12, 0xf8, 0x71, 0x68, 0xce, 0x97, 0xc3, 0xd1, 0xf1, 0x13, 0x9a, 0x10, 0x52, 0x90,
	0xcd, 0x20, 0xfb, 0x9e, 0x66, 0x02, 0xbf, 0xfc, 0x94, 0xaa, 0xe3, 0xbd, 0x1a, 0x94, 0x53, 0xfe,
	0xdc, 0x23, 0xc3, 0x4f, 0x2c, 0x5e, 0x0d, 0xfd, 0xbd, 0xb9, 0x4d, 0x5e, 0xb3, 0xde, 0x4a, 0x60,
	0x7e, 0xdc, 0xd1, 0x79, 0xef, 0xe2, 0x6c, 0xd4, 0x48, 0x66, 0xb4, 0x51, 0x23, 0xc3, 0x3f, 0xdb,
	0xeb, 0x89, 0x3e, 0x2b, 0xed, 0x1b, 0x13, 0x52, 0x1a, 0x12, 0x4c, 0xec, 0x9b, 0xa0, 0x9e, 0x68,
	0x90, 0xdb, 0x04, 0xe1, 0x63, 0x6a, 0x08, 0xb9, 0x68, 0x84, 0x54, 0x23, 0x36, 0xff, 0x55, 0x0b,
	0x29, 0x4e, 0x4e, 0x59, 0x64, 0x5c, 0x2d, 0xa3, 0xde, 0xc5, 0x60, 0xed, 0x1d, 0x57, 0x93, 0x89,
	0xcf, 0x6a, 0x40, 0x17, 0x0b, 0xca, 0xda, 0x0e, 0x85, 0x96, 0x10, 0x8e, 0x62, 0x37, 0xa4, 0xad,
	0x21, 0x4a, 0xdb, 0x79, 0x88, 0xe5, 0x1a, 0xcb, 0x77, 0xc3, 0xd5, 0x3c, 0x2b, 0x75, 0xea, 0x16,
	0x1a, 0x48, 0x57, 0x2b, 0x28, 0xc3, 0x92, 0xa4, 0x2d, 0xba, 0x49, 0xd0, 0x0f, 0x2a, 0xda, 0x7f,
	0x84, 0xe5, 0xba, 0x20, 0x75, 0x3d, 0x38, 0x87, 0x2f, 0xf1, 0x0a, 0x8b, 0x87, 0xbf, 0x23, 0xc6,
	0x56, 0x2c, 0x79, 0x8a, 0xa8, 0xd6, 0x56, 0x18, 0x61, 0x90, 0x46, 0x4d, 0xd0, 0x4a, 0x9f, 0xd1,
	0xba, 0xd8, 0x5a, 0x41, 0x6c, 0xde, 0x81, 0x3b, 0x14, 0x34, 0xaa, 0x6c, 0x87, 0xb0, 0x36, 0x5f,
	0xdd, 0x3f, 0x4a, 0xc1, 0x3a, 0x74, 0x83, 0xc1, 0x79, 0x35, 0xbe, 0x22, 0x53, 0x23, 0xe8, 0x09,
	0x5d, 0xf6, 0x7f, 0x8e, 0x59, 0x9c, 0xc0, 0x6b, 0x8c, 0xc8, 0x3e, 0xde, 0x38, 0xf4, 0x09, 0xaa,
	0xcc, 0x5f, 0x46, 0x23, 0x23, 0x2b, 0xf3, 0xca, 0x2d, 0x69, 0x59, 0x37, 0x4f, 0x3f, 0x20, 0x78,
	0xa8, 0xf6, 0x77, 0x1c, 0x10, 0xda, 0x02, 0x7e, 0x09, 0x10, 0x21, 0x8d, 0xfa, 0xf7, 0x02, 0x65,
	0x6b, 0xea, 0xdf, 0x5f, 0x37, 0xd5, 0xc1, 0x06, 0x81, 0xd4, 0xae, 0x7b, 0xc1, 0x5a, 0x33, 0xef,
	0xfc, 0x43, 0x52, 0x2a, 0xdf, 0xf8, 0x68, 0xaf, 0x47, 0x24, 0x05, 0x8c, 0x51, 0x86, 0x8c, 0x48,
	0x6c, 0xfb, 0xb5, 0xe8, 0xd7, 0x03, 0x19, 0x71, 0xf8, 0x96, 0x0d, 0x1e, 0x75, 0xe9, 0xf9, 0x86,
	0x6c, 0xb9, 0xf1, 0xf0, 0xa5, 0x73, 0x1f, 0x6d, 0x53, 0x84, 0xc9, 0x6e, 0xbc, 0xdf, 0xea, 0xc9,
	0x7c, 0xe8, 0x7d, 0x5b, 0xed, 0xe0, 0x69, 0x9b, 0xf6, 0xe9, 0xab, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xfe, 0xcc, 0x76, 0x1d, 0xd8, 0x05, 0x00, 0x00,
}
