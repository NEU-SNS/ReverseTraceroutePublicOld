// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/datamodel/ping.proto
// DO NOT EDIT!

/*
Package datamodel is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/datamodel/ping.proto
	github.com/NEU-SNS/ReverseTraceroute/datamodel/recspoof.proto
	github.com/NEU-SNS/ReverseTraceroute/datamodel/time.proto
	github.com/NEU-SNS/ReverseTraceroute/datamodel/traceroute.proto
	github.com/NEU-SNS/ReverseTraceroute/datamodel/update.proto
	github.com/NEU-SNS/ReverseTraceroute/datamodel/vantagepoint.proto

It has these top-level messages:
	PingMeasurement
	PingArg
	PingArgResp
	PingStats
	PingResponse
	TsAndAddr
	Ping
	RecSpoof
	Spoof
	SpoofedProbes
	SpoofedProbesResponse
	Probe
	RecordRoute
	TimeStamp
	Stamp
	NotifyRecSpoofResponse
	ReceiveSpoofedProbesResponse
	Time
	RTT
	TracerouteMeasurement
	TracerouteArg
	TracerouteArgResp
	TracerouteHop
	Traceroute
	TracerouteTime
	UpdateResponse
	VantagePoint
	VPRequest
	VPReturn
	RRSpooferRequest
	RRSpooferResponse
	TSSpooferRequest
	TSSpooferResponse
*/
package datamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingMeasurement struct {
	Src         uint32 `protobuf:"varint,1,opt,name=src" json:"src,omitempty"`
	Dst         uint32 `protobuf:"varint,2,opt,name=dst" json:"dst,omitempty"`
	SpooferAddr uint32 `protobuf:"varint,3,opt,name=spoofer_addr" json:"spoofer_addr,omitempty"`
	Spoof       bool   `protobuf:"varint,4,opt,name=spoof" json:"spoof,omitempty"`
	RR          bool   `protobuf:"varint,5,opt,name=RR" json:"RR,omitempty"`
	SAddr       string `protobuf:"bytes,6,opt,name=s_addr" json:"s_addr,omitempty"`
	Payload     string `protobuf:"bytes,7,opt,name=payload" json:"payload,omitempty"`
	Count       string `protobuf:"bytes,8,opt,name=count" json:"count,omitempty"`
	IcmpSum     string `protobuf:"bytes,9,opt,name=icmp_sum" json:"icmp_sum,omitempty"`
	Dport       string `protobuf:"bytes,10,opt,name=dport" json:"dport,omitempty"`
	Sport       string `protobuf:"bytes,11,opt,name=sport" json:"sport,omitempty"`
	Wait        string `protobuf:"bytes,12,opt,name=wait" json:"wait,omitempty"`
	Ttl         string `protobuf:"bytes,13,opt,name=ttl" json:"ttl,omitempty"`
	Mtu         string `protobuf:"bytes,14,opt,name=mtu" json:"mtu,omitempty"`
	ReplyCount  string `protobuf:"bytes,15,opt,name=reply_count" json:"reply_count,omitempty"`
	Pattern     string `protobuf:"bytes,16,opt,name=pattern" json:"pattern,omitempty"`
	Method      string `protobuf:"bytes,17,opt,name=method" json:"method,omitempty"`
	Size        string `protobuf:"bytes,18,opt,name=size" json:"size,omitempty"`
	UserId      string `protobuf:"bytes,19,opt,name=user_id" json:"user_id,omitempty"`
	Tos         string `protobuf:"bytes,20,opt,name=tos" json:"tos,omitempty"`
	TimeStamp   string `protobuf:"bytes,21,opt,name=time_stamp" json:"time_stamp,omitempty"`
	Timeout     int64  `protobuf:"varint,22,opt,name=timeout" json:"timeout,omitempty"`
	CheckCache  bool   `protobuf:"varint,23,opt,name=check_cache" json:"check_cache,omitempty"`
	CheckDb     bool   `protobuf:"varint,24,opt,name=check_db" json:"check_db,omitempty"`
	Staleness   int64  `protobuf:"varint,25,opt,name=staleness" json:"staleness,omitempty"`
}

func (m *PingMeasurement) Reset()                    { *m = PingMeasurement{} }
func (m *PingMeasurement) String() string            { return proto.CompactTextString(m) }
func (*PingMeasurement) ProtoMessage()               {}
func (*PingMeasurement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingArg struct {
	Pings []*PingMeasurement `protobuf:"bytes,1,rep,name=pings" json:"pings,omitempty"`
}

func (m *PingArg) Reset()                    { *m = PingArg{} }
func (m *PingArg) String() string            { return proto.CompactTextString(m) }
func (*PingArg) ProtoMessage()               {}
func (*PingArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingArg) GetPings() []*PingMeasurement {
	if m != nil {
		return m.Pings
	}
	return nil
}

type PingArgResp struct {
	Pings []*Ping `protobuf:"bytes,1,rep,name=pings" json:"pings,omitempty"`
}

func (m *PingArgResp) Reset()                    { *m = PingArgResp{} }
func (m *PingArgResp) String() string            { return proto.CompactTextString(m) }
func (*PingArgResp) ProtoMessage()               {}
func (*PingArgResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingArgResp) GetPings() []*Ping {
	if m != nil {
		return m.Pings
	}
	return nil
}

type PingStats struct {
	Replies int32   `protobuf:"varint,1,opt,name=replies" json:"replies,omitempty"`
	Loss    float32 `protobuf:"fixed32,2,opt,name=loss" json:"loss,omitempty"`
	Min     float32 `protobuf:"fixed32,3,opt,name=min" json:"min,omitempty"`
	Max     float32 `protobuf:"fixed32,4,opt,name=max" json:"max,omitempty"`
	Avg     float32 `protobuf:"fixed32,5,opt,name=avg" json:"avg,omitempty"`
	Stddev  float32 `protobuf:"fixed32,6,opt,name=stddev" json:"stddev,omitempty"`
}

func (m *PingStats) Reset()                    { *m = PingStats{} }
func (m *PingStats) String() string            { return proto.CompactTextString(m) }
func (*PingStats) ProtoMessage()               {}
func (*PingStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PingResponse struct {
	From       uint32       `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	Seq        uint32       `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	ReplySize  uint32       `protobuf:"varint,3,opt,name=reply_size" json:"reply_size,omitempty"`
	ReplyTtl   uint32       `protobuf:"varint,4,opt,name=reply_ttl" json:"reply_ttl,omitempty"`
	ReplyProto string       `protobuf:"bytes,5,opt,name=reply_proto" json:"reply_proto,omitempty"`
	Tx         *Time        `protobuf:"bytes,6,opt,name=tx" json:"tx,omitempty"`
	Rx         *Time        `protobuf:"bytes,7,opt,name=rx" json:"rx,omitempty"`
	Rtt        uint32       `protobuf:"varint,8,opt,name=rtt" json:"rtt,omitempty"`
	ProbeIpid  uint32       `protobuf:"varint,9,opt,name=probe_ipid" json:"probe_ipid,omitempty"`
	ReplyIpid  uint32       `protobuf:"varint,10,opt,name=reply_ipid" json:"reply_ipid,omitempty"`
	IcmpType   uint32       `protobuf:"varint,11,opt,name=icmp_type" json:"icmp_type,omitempty"`
	IcmpCode   uint32       `protobuf:"varint,12,opt,name=icmp_code" json:"icmp_code,omitempty"`
	RR         []uint32     `protobuf:"varint,13,rep,name=RR" json:"RR,omitempty"`
	Tsonly     []uint32     `protobuf:"varint,14,rep,name=tsonly" json:"tsonly,omitempty"`
	Tsandaddr  []*TsAndAddr `protobuf:"bytes,15,rep,name=tsandaddr" json:"tsandaddr,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PingResponse) GetTx() *Time {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *PingResponse) GetRx() *Time {
	if m != nil {
		return m.Rx
	}
	return nil
}

func (m *PingResponse) GetTsandaddr() []*TsAndAddr {
	if m != nil {
		return m.Tsandaddr
	}
	return nil
}

type TsAndAddr struct {
	Ip uint32 `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Ts uint32 `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *TsAndAddr) Reset()                    { *m = TsAndAddr{} }
func (m *TsAndAddr) String() string            { return proto.CompactTextString(m) }
func (*TsAndAddr) ProtoMessage()               {}
func (*TsAndAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Ping struct {
	Type        string          `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Method      string          `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Src         uint32          `protobuf:"varint,3,opt,name=src" json:"src,omitempty"`
	Dst         uint32          `protobuf:"varint,4,opt,name=dst" json:"dst,omitempty"`
	Start       *Time           `protobuf:"bytes,5,opt,name=start" json:"start,omitempty"`
	PingSent    uint32          `protobuf:"varint,6,opt,name=ping_sent" json:"ping_sent,omitempty"`
	ProbeSize   uint32          `protobuf:"varint,7,opt,name=probe_size" json:"probe_size,omitempty"`
	UserId      uint32          `protobuf:"varint,8,opt,name=user_id" json:"user_id,omitempty"`
	Ttl         uint32          `protobuf:"varint,9,opt,name=ttl" json:"ttl,omitempty"`
	Wait        uint32          `protobuf:"varint,10,opt,name=wait" json:"wait,omitempty"`
	Timeout     uint32          `protobuf:"varint,11,opt,name=timeout" json:"timeout,omitempty"`
	Flags       []string        `protobuf:"bytes,12,rep,name=flags" json:"flags,omitempty"`
	Responses   []*PingResponse `protobuf:"bytes,13,rep,name=responses" json:"responses,omitempty"`
	Statistics  *PingStats      `protobuf:"bytes,14,opt,name=statistics" json:"statistics,omitempty"`
	Error       string          `protobuf:"bytes,15,opt,name=error" json:"error,omitempty"`
	Version     string          `protobuf:"bytes,16,opt,name=version" json:"version,omitempty"`
	SpoofedFrom uint32          `protobuf:"varint,17,opt,name=spoofed_from" json:"spoofed_from,omitempty"`
	Id          int64           `protobuf:"varint,18,opt,name=id" json:"id,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ping) GetStart() *Time {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Ping) GetResponses() []*PingResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *Ping) GetStatistics() *PingStats {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func init() {
	proto.RegisterType((*PingMeasurement)(nil), "datamodel.PingMeasurement")
	proto.RegisterType((*PingArg)(nil), "datamodel.PingArg")
	proto.RegisterType((*PingArgResp)(nil), "datamodel.PingArgResp")
	proto.RegisterType((*PingStats)(nil), "datamodel.PingStats")
	proto.RegisterType((*PingResponse)(nil), "datamodel.PingResponse")
	proto.RegisterType((*TsAndAddr)(nil), "datamodel.TsAndAddr")
	proto.RegisterType((*Ping)(nil), "datamodel.Ping")
}

func init() {
	proto.RegisterFile("github.com/NEU-SNS/ReverseTraceroute/datamodel/ping.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0xdb, 0x3a,
	0x10, 0x45, 0x64, 0x3b, 0xb6, 0x28, 0x3b, 0x4e, 0x94, 0xdc, 0x1b, 0xde, 0x5c, 0xa0, 0x28, 0xdc,
	0x45, 0xd3, 0x02, 0xb1, 0x81, 0xb4, 0x9b, 0x2e, 0x53, 0xa0, 0xcb, 0x06, 0x85, 0x93, 0x6e, 0xba,
	0x11, 0x68, 0x91, 0x71, 0x84, 0x4a, 0xa2, 0x4a, 0xd2, 0x69, 0xdc, 0xff, 0xe9, 0x77, 0xf4, 0x7b,
	0xfa, 0x17, 0x9d, 0x19, 0x99, 0xf2, 0x03, 0xd9, 0x74, 0x65, 0x9f, 0x11, 0x39, 0x33, 0x3c, 0xe7,
	0xcc, 0xb0, 0x77, 0xf3, 0xcc, 0xdd, 0x2f, 0x66, 0xe3, 0x54, 0x17, 0x93, 0xeb, 0x0f, 0x9f, 0x2f,
	0x6e, 0xae, 0x6f, 0x26, 0x53, 0xf5, 0xa0, 0x8c, 0x55, 0xb7, 0x46, 0xa4, 0xca, 0xe8, 0x85, 0x53,
	0x13, 0x29, 0x9c, 0x28, 0xb4, 0x54, 0xf9, 0xa4, 0xca, 0xca, 0xf9, 0xb8, 0x32, 0xda, 0xe9, 0x38,
	0x6c, 0xa2, 0x67, 0x7f, 0x9b, 0xc5, 0x65, 0x85, 0xaa, 0xb3, 0x8c, 0x7e, 0xb6, 0xd8, 0xf0, 0x13,
	0x24, 0xfd, 0xa8, 0x84, 0x5d, 0x18, 0x55, 0xa8, 0xd2, 0xc5, 0x11, 0x6b, 0x59, 0x93, 0xf2, 0xbd,
	0xe7, 0x7b, 0xe7, 0x03, 0x04, 0xd2, 0x3a, 0x1e, 0x10, 0x38, 0x61, 0x7d, 0x5b, 0x69, 0x7d, 0xa7,
	0x4c, 0x22, 0xa4, 0x34, 0xbc, 0x45, 0xd1, 0x01, 0xeb, 0x50, 0x94, 0xb7, 0x01, 0xf6, 0x62, 0xc6,
	0x82, 0xe9, 0x94, 0x77, 0xe8, 0xff, 0x01, 0xdb, 0xb7, 0xf5, 0xd1, 0x7d, 0xc0, 0x61, 0x3c, 0x64,
	0xdd, 0x4a, 0x2c, 0x73, 0x2d, 0x24, 0xef, 0x52, 0x00, 0xee, 0xa6, 0x7a, 0x51, 0x3a, 0xde, 0x23,
	0x78, 0xc8, 0x7a, 0x59, 0x5a, 0x54, 0x89, 0x5d, 0x14, 0x3c, 0xf4, 0x07, 0x64, 0xa5, 0x8d, 0xe3,
	0xcc, 0x43, 0x4b, 0x30, 0x22, 0xd8, 0x67, 0xed, 0xef, 0x22, 0x73, 0xbc, 0x4f, 0x08, 0x7a, 0x75,
	0x2e, 0xe7, 0x03, 0x0f, 0x0a, 0xb7, 0xe0, 0x07, 0x04, 0x8e, 0x59, 0x64, 0x54, 0x95, 0x2f, 0x93,
	0xba, 0xd8, 0x70, 0xdd, 0x8c, 0x73, 0xca, 0x94, 0xfc, 0x90, 0x02, 0xd0, 0x6d, 0xa1, 0xdc, 0xbd,
	0x96, 0xfc, 0xc8, 0x67, 0xb7, 0xd9, 0x0f, 0xc5, 0x63, 0x7f, 0x7c, 0x61, 0xe1, 0xe5, 0x99, 0xe4,
	0xc7, 0x4d, 0x39, 0x6d, 0xf9, 0x09, 0x01, 0x78, 0x36, 0xd2, 0x9a, 0x58, 0x20, 0xb9, 0xe2, 0xff,
	0xf8, 0x1b, 0x18, 0x03, 0xf6, 0xf9, 0xbf, 0x10, 0x68, 0x61, 0x1b, 0xe9, 0xbd, 0x4a, 0xbf, 0x26,
	0xa9, 0x80, 0x5f, 0x7e, 0x4a, 0x1c, 0xc1, 0x9b, 0xeb, 0xa0, 0x9c, 0x71, 0x4e, 0x91, 0x23, 0x16,
	0x42, 0x9a, 0x5c, 0x95, 0xca, 0x5a, 0xfe, 0x1f, 0xde, 0x1c, 0xbd, 0x65, 0x5d, 0x94, 0xe9, 0xca,
	0xcc, 0xe3, 0x57, 0xac, 0x83, 0x36, 0xb0, 0x20, 0x50, 0xeb, 0x3c, 0xba, 0x3c, 0x1b, 0x37, 0xc2,
	0x8e, 0x77, 0x94, 0x1c, 0x5d, 0xb0, 0x68, 0x75, 0x6b, 0xaa, 0x6c, 0x15, 0x3f, 0xdb, 0xbe, 0x39,
	0xdc, 0xb9, 0x39, 0x12, 0x2c, 0xc4, 0xdf, 0x1b, 0x27, 0x9c, 0xc5, 0xe6, 0x91, 0xb2, 0x4c, 0x59,
	0x72, 0x42, 0x07, 0xd9, 0xc8, 0x35, 0x34, 0x84, 0x56, 0x08, 0x88, 0xde, 0xac, 0x24, 0x07, 0xd4,
	0x40, 0x3c, 0x92, 0xfe, 0x04, 0xc4, 0xc3, 0x9c, 0x0c, 0x10, 0x90, 0x01, 0x9c, 0x94, 0xea, 0x81,
	0x0c, 0x10, 0x8c, 0x7e, 0x05, 0xac, 0x8f, 0x35, 0xb0, 0x1f, 0x5d, 0x5a, 0x85, 0x59, 0xef, 0x8c,
	0x2e, 0xd6, 0x6e, 0xb3, 0xea, 0xdb, 0xca, 0x6d, 0x40, 0x69, 0x2d, 0x1a, 0x89, 0x50, 0x7b, 0x0d,
	0xa8, 0xa9, 0x63, 0x28, 0x74, 0x9b, 0x42, 0x8d, 0xb6, 0xe4, 0x68, 0xaa, 0x1b, 0xc6, 0xff, 0xb3,
	0xc0, 0x3d, 0x52, 0xcd, 0xed, 0x77, 0xde, 0x82, 0x1e, 0xf8, 0xd1, 0x3c, 0x92, 0x01, 0x9f, 0xf8,
	0x08, 0x2d, 0x18, 0x57, 0xfb, 0x91, 0x5a, 0x80, 0xac, 0x33, 0x95, 0x64, 0x15, 0xc8, 0x1e, 0x6e,
	0xb7, 0x45, 0x31, 0xe6, 0xdb, 0x22, 0xdf, 0xba, 0x65, 0xa5, 0xc8, 0x9a, 0xeb, 0x50, 0x0a, 0xa9,
	0xc9, 0x9f, 0x83, 0xd5, 0x64, 0x0c, 0x80, 0xfc, 0x01, 0x12, 0xe3, 0xac, 0x2e, 0xf3, 0x25, 0x38,
	0x14, 0xf1, 0x4b, 0x16, 0x3a, 0x2b, 0x4a, 0x49, 0xc3, 0x32, 0x24, 0x7d, 0x4e, 0x36, 0x5b, 0xb3,
	0x57, 0xa5, 0xbc, 0x82, 0x6f, 0xa3, 0x17, 0x2c, 0x6c, 0x00, 0x66, 0xcc, 0xaa, 0x15, 0x77, 0xf0,
	0xdf, 0xd5, 0xea, 0x0c, 0x46, 0xbf, 0x03, 0xd6, 0x46, 0x9a, 0x91, 0x5e, 0xea, 0x69, 0x6f, 0xc7,
	0xe0, 0x81, 0x77, 0x30, 0x4e, 0x7a, 0x6b, 0x73, 0xd2, 0x6b, 0x52, 0xc1, 0x2a, 0x60, 0x41, 0x98,
	0xb3, 0xce, 0xd3, 0x2c, 0xc1, 0xeb, 0xd0, 0x4a, 0x89, 0x05, 0x9b, 0x11, 0xcd, 0x1b, 0x5c, 0x91,
	0x5c, 0x5d, 0x8a, 0x6d, 0xcc, 0x4c, 0xcf, 0x17, 0x41, 0xe5, 0x6a, 0x26, 0xfd, 0xf4, 0x32, 0x7f,
	0xd6, 0x4f, 0x4b, 0xe4, 0xf7, 0xca, 0x5d, 0x2e, 0xc0, 0xae, 0x7d, 0xa0, 0x23, 0x8c, 0x5f, 0xa3,
	0xf4, 0xb5, 0x6b, 0x2c, 0x91, 0x18, 0x5d, 0x9e, 0xee, 0x38, 0xb8, 0x71, 0xd5, 0x39, 0x63, 0xd0,
	0xbe, 0xcb, 0xac, 0xcb, 0x52, 0x4b, 0x3b, 0x60, 0x9b, 0xce, 0xb5, 0xcd, 0xa1, 0x88, 0x32, 0x46,
	0x9b, 0xf5, 0x4e, 0xc0, 0xbd, 0x99, 0x69, 0xbf, 0x13, 0x9a, 0x95, 0x27, 0x13, 0xf2, 0xe9, 0x91,
	0xe7, 0x1a, 0x9e, 0x84, 0x7b, 0xa1, 0xf5, 0x3e, 0xfa, 0xb2, 0x5e, 0xc5, 0xb3, 0x7d, 0x32, 0xe1,
	0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x69, 0x3d, 0xa3, 0xaa, 0xd9, 0x05, 0x00, 0x00,
}
