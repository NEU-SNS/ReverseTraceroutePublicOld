// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/datamodel/reverse_traceroute.proto
// DO NOT EDIT!

package datamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RevtrHopType int32

const (
	RevtrHopType_DUMMY                                         RevtrHopType = 0
	RevtrHopType_DST_REV_SEGMENT                               RevtrHopType = 1
	RevtrHopType_DST_SYM_REV_SEGMENT                           RevtrHopType = 2
	RevtrHopType_TR_TO_SRC_REV_SEGMENT                         RevtrHopType = 3
	RevtrHopType_RR_REV_SEGMENT                                RevtrHopType = 4
	RevtrHopType_SPOOF_RR_REV_SEGMENT                          RevtrHopType = 5
	RevtrHopType_TS_ADJ_REV_SEGMENT                            RevtrHopType = 6
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT                      RevtrHopType = 7
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO              RevtrHopType = 8
	RevtrHopType_SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP RevtrHopType = 9
)

var RevtrHopType_name = map[int32]string{
	0: "DUMMY",
	1: "DST_REV_SEGMENT",
	2: "DST_SYM_REV_SEGMENT",
	3: "TR_TO_SRC_REV_SEGMENT",
	4: "RR_REV_SEGMENT",
	5: "SPOOF_RR_REV_SEGMENT",
	6: "TS_ADJ_REV_SEGMENT",
	7: "SPOOF_TS_ADJ_REV_SEGMENT",
	8: "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO",
	9: "SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP",
}
var RevtrHopType_value = map[string]int32{
	"DUMMY":                                         0,
	"DST_REV_SEGMENT":                               1,
	"DST_SYM_REV_SEGMENT":                           2,
	"TR_TO_SRC_REV_SEGMENT":                         3,
	"RR_REV_SEGMENT":                                4,
	"SPOOF_RR_REV_SEGMENT":                          5,
	"TS_ADJ_REV_SEGMENT":                            6,
	"SPOOF_TS_ADJ_REV_SEGMENT":                      7,
	"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO":              8,
	"SPOOF_TS_ADJ_REV_SEGMENT_TS_ZERO_DOUBLE_STAMP": 9,
}

func (x RevtrHopType) String() string {
	return proto.EnumName(RevtrHopType_name, int32(x))
}
func (RevtrHopType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type RevtrStatus int32

const (
	RevtrStatus_DUMMY_X   RevtrStatus = 0
	RevtrStatus_RUNNING   RevtrStatus = 1
	RevtrStatus_COMPLETED RevtrStatus = 2
)

var RevtrStatus_name = map[int32]string{
	0: "DUMMY_X",
	1: "RUNNING",
	2: "COMPLETED",
}
var RevtrStatus_value = map[string]int32{
	"DUMMY_X":   0,
	"RUNNING":   1,
	"COMPLETED": 2,
}

func (x RevtrStatus) String() string {
	return proto.EnumName(RevtrStatus_name, int32(x))
}
func (RevtrStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type RevtrMeasurement struct {
	Src            string `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dst            string `protobuf:"bytes,2,opt,name=dst" json:"dst,omitempty"`
	Staleness      uint32 `protobuf:"varint,3,opt,name=staleness" json:"staleness,omitempty"`
	Id             uint32 `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	BackoffEndhost bool   `protobuf:"varint,5,opt,name=backoff_endhost" json:"backoff_endhost,omitempty"`
}

func (m *RevtrMeasurement) Reset()                    { *m = RevtrMeasurement{} }
func (m *RevtrMeasurement) String() string            { return proto.CompactTextString(m) }
func (*RevtrMeasurement) ProtoMessage()               {}
func (*RevtrMeasurement) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type RevtrRequest struct {
	Revtrs []*RevtrMeasurement `protobuf:"bytes,1,rep,name=revtrs" json:"revtrs,omitempty"`
}

func (m *RevtrRequest) Reset()                    { *m = RevtrRequest{} }
func (m *RevtrRequest) String() string            { return proto.CompactTextString(m) }
func (*RevtrRequest) ProtoMessage()               {}
func (*RevtrRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *RevtrRequest) GetRevtrs() []*RevtrMeasurement {
	if m != nil {
		return m.Revtrs
	}
	return nil
}

type ReverseTraceroute struct {
	Status     RevtrStatus `protobuf:"varint,1,opt,name=status,enum=datamodel.RevtrStatus" json:"status,omitempty"`
	Src        string      `protobuf:"bytes,2,opt,name=src" json:"src,omitempty"`
	Dst        string      `protobuf:"bytes,3,opt,name=dst" json:"dst,omitempty"`
	Runtime    int64       `protobuf:"varint,4,opt,name=runtime" json:"runtime,omitempty"`
	RrIssued   int32       `protobuf:"varint,5,opt,name=rr_issued" json:"rr_issued,omitempty"`
	TsIssued   int32       `protobuf:"varint,6,opt,name=ts_issued" json:"ts_issued,omitempty"`
	StopReason string      `protobuf:"bytes,7,opt,name=stop_reason" json:"stop_reason,omitempty"`
	Date       string      `protobuf:"bytes,8,opt,name=date" json:"date,omitempty"`
	Path       []*RevtrHop `protobuf:"bytes,9,rep,name=path" json:"path,omitempty"`
	Id         uint32      `protobuf:"varint,10,opt,name=id" json:"id,omitempty"`
}

func (m *ReverseTraceroute) Reset()                    { *m = ReverseTraceroute{} }
func (m *ReverseTraceroute) String() string            { return proto.CompactTextString(m) }
func (*ReverseTraceroute) ProtoMessage()               {}
func (*ReverseTraceroute) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ReverseTraceroute) GetPath() []*RevtrHop {
	if m != nil {
		return m.Path
	}
	return nil
}

type RevtrHop struct {
	Hop  string       `protobuf:"bytes,1,opt,name=hop" json:"hop,omitempty"`
	Type RevtrHopType `protobuf:"varint,2,opt,name=type,enum=datamodel.RevtrHopType" json:"type,omitempty"`
}

func (m *RevtrHop) Reset()                    { *m = RevtrHop{} }
func (m *RevtrHop) String() string            { return proto.CompactTextString(m) }
func (*RevtrHop) ProtoMessage()               {}
func (*RevtrHop) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type RevtrResponse struct {
	Revtrs []*ReverseTraceroute `protobuf:"bytes,1,rep,name=revtrs" json:"revtrs,omitempty"`
}

func (m *RevtrResponse) Reset()                    { *m = RevtrResponse{} }
func (m *RevtrResponse) String() string            { return proto.CompactTextString(m) }
func (*RevtrResponse) ProtoMessage()               {}
func (*RevtrResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *RevtrResponse) GetRevtrs() []*ReverseTraceroute {
	if m != nil {
		return m.Revtrs
	}
	return nil
}

func init() {
	proto.RegisterType((*RevtrMeasurement)(nil), "datamodel.RevtrMeasurement")
	proto.RegisterType((*RevtrRequest)(nil), "datamodel.RevtrRequest")
	proto.RegisterType((*ReverseTraceroute)(nil), "datamodel.ReverseTraceroute")
	proto.RegisterType((*RevtrHop)(nil), "datamodel.RevtrHop")
	proto.RegisterType((*RevtrResponse)(nil), "datamodel.RevtrResponse")
	proto.RegisterEnum("datamodel.RevtrHopType", RevtrHopType_name, RevtrHopType_value)
	proto.RegisterEnum("datamodel.RevtrStatus", RevtrStatus_name, RevtrStatus_value)
}

var fileDescriptor3 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x5f, 0x6f, 0xd3, 0x30,
	0x1c, 0xa4, 0x49, 0xff, 0xe5, 0xd7, 0xb5, 0xcd, 0x5c, 0xd8, 0x82, 0xd8, 0xc3, 0xa8, 0x00, 0x4d,
	0x83, 0xb5, 0xa2, 0x48, 0xbc, 0x20, 0x90, 0xb6, 0x35, 0x14, 0xd0, 0x92, 0x54, 0x49, 0x8a, 0xd8,
	0x5e, 0xac, 0xb4, 0xf1, 0x68, 0xc5, 0x1a, 0x07, 0xdb, 0x41, 0xe2, 0xd3, 0xf0, 0xcd, 0xf8, 0x2c,
	0x38, 0x5e, 0x57, 0x48, 0x19, 0xe2, 0x2d, 0x77, 0x67, 0xff, 0x7c, 0x77, 0x8e, 0x61, 0xf4, 0x79,
	0x21, 0xe6, 0xd9, 0xb4, 0x37, 0xa3, 0xcb, 0xbe, 0x6b, 0x4f, 0x8e, 0x02, 0x37, 0xe8, 0xfb, 0xe4,
	0x1b, 0x61, 0x9c, 0x84, 0x2c, 0x9a, 0x11, 0x46, 0x33, 0x41, 0xfa, 0x71, 0x24, 0xa2, 0x25, 0x8d,
	0xc9, 0x55, 0x9f, 0x5d, 0x6b, 0x58, 0xac, 0xc5, 0x5e, 0xca, 0xa8, 0xa0, 0xc8, 0x58, 0xaf, 0xe9,
	0xc6, 0x60, 0xca, 0x11, 0x82, 0x39, 0x24, 0xe2, 0x19, 0x23, 0x4b, 0x92, 0x08, 0xd4, 0x00, 0x9d,
	0xb3, 0x99, 0x55, 0xda, 0x2f, 0x1d, 0x18, 0x39, 0x88, 0xb9, 0xb0, 0x34, 0x05, 0xb6, 0xc1, 0xe0,
	0x22, 0xba, 0x22, 0x09, 0xe1, 0xdc, 0xd2, 0x25, 0xd5, 0x44, 0x00, 0xda, 0x22, 0xb6, 0xca, 0xea,
	0x7b, 0x17, 0xda, 0xd3, 0x68, 0xf6, 0x85, 0x5e, 0x5e, 0x62, 0x92, 0xc4, 0x73, 0x2a, 0xf7, 0x55,
	0xa4, 0x50, 0xef, 0xbe, 0x82, 0x2d, 0x75, 0x8a, 0x4f, 0xbe, 0x66, 0x84, 0x0b, 0xf4, 0x14, 0xaa,
	0x2c, 0xc7, 0x5c, 0x1e, 0xa2, 0x1f, 0x34, 0x06, 0x0f, 0x7a, 0x6b, 0x47, 0xbd, 0x4d, 0x3b, 0xdd,
	0x9f, 0x25, 0xd8, 0xfe, 0x2b, 0x26, 0x7a, 0x02, 0x55, 0x69, 0x45, 0x64, 0x5c, 0xf9, 0x6c, 0x0d,
	0x76, 0x36, 0x47, 0x04, 0x4a, 0xbd, 0x09, 0xa3, 0xfd, 0x19, 0x46, 0x57, 0xa0, 0x0d, 0x35, 0x96,
	0x25, 0x62, 0xb1, 0x24, 0xca, 0xbe, 0x9e, 0xa7, 0x63, 0x0c, 0x2f, 0x38, 0xcf, 0x48, 0xac, 0x8c,
	0x57, 0x72, 0x4a, 0xf0, 0x1b, 0xaa, 0xaa, 0xa8, 0x0e, 0x34, 0xb8, 0xa0, 0x29, 0x66, 0xd2, 0x22,
	0x4d, 0xac, 0x9a, 0x9a, 0xb5, 0x05, 0x65, 0x79, 0x3c, 0xb1, 0xea, 0x0a, 0x3d, 0x84, 0x72, 0x1a,
	0x89, 0xb9, 0x65, 0xa8, 0x70, 0x9d, 0x4d, 0x67, 0xef, 0x68, 0xba, 0xaa, 0x0d, 0xf2, 0xda, 0xba,
	0x6f, 0xa0, 0xbe, 0xe6, 0xa5, 0xc3, 0x39, 0x4d, 0x57, 0xdd, 0x3f, 0x86, 0xb2, 0xf8, 0x9e, 0x12,
	0x65, 0xbe, 0x35, 0xd8, 0xbd, 0x65, 0x4e, 0x28, 0xe5, 0xee, 0x6b, 0x68, 0xae, 0xda, 0xe5, 0x29,
	0x4d, 0x38, 0x41, 0xcf, 0x36, 0xea, 0xdd, 0x2b, 0xee, 0x2c, 0x36, 0x79, 0xf8, 0x43, 0x5b, 0xdd,
	0xce, 0x6a, 0x1e, 0x32, 0xa0, 0x32, 0x9c, 0x38, 0xce, 0xb9, 0x79, 0x47, 0x86, 0x6d, 0x0f, 0x83,
	0x10, 0xfb, 0xf6, 0x47, 0x1c, 0xd8, 0x23, 0xc7, 0x76, 0x43, 0xb3, 0x24, 0xaf, 0xb9, 0x93, 0x93,
	0xc1, 0xb9, 0x53, 0x10, 0x34, 0x74, 0x1f, 0xee, 0x85, 0x3e, 0x0e, 0x3d, 0x1c, 0xf8, 0xa7, 0x05,
	0x49, 0x47, 0x08, 0x5a, 0xbe, 0x5f, 0xe0, 0xca, 0xc8, 0x82, 0xbb, 0xc1, 0xd8, 0xf3, 0xde, 0xe2,
	0x0d, 0xa5, 0x82, 0x76, 0x00, 0x85, 0x01, 0x3e, 0x1e, 0x7e, 0x28, 0xf0, 0x55, 0xb4, 0x07, 0xd6,
	0xf5, 0x8e, 0x5b, 0xd4, 0x1a, 0x7a, 0x04, 0xfb, 0xff, 0x52, 0x73, 0xea, 0xc2, 0xf6, 0x3d, 0xb3,
	0x8e, 0x9e, 0xc3, 0xd1, 0xff, 0x56, 0xe1, 0xa1, 0x37, 0x39, 0x39, 0xb3, 0x71, 0x10, 0x1e, 0x3b,
	0x63, 0xd3, 0x38, 0x7c, 0x09, 0x8d, 0xe2, 0x2f, 0x55, 0x53, 0xfd, 0xe0, 0x4f, 0xb2, 0x21, 0x09,
	0xfc, 0x89, 0xeb, 0xbe, 0x77, 0x47, 0xb2, 0x99, 0x26, 0x18, 0xa7, 0x9e, 0x33, 0x3e, 0xb3, 0x43,
	0x7b, 0x68, 0x6a, 0x27, 0x8d, 0x8b, 0xdf, 0x2f, 0x6d, 0x5a, 0x55, 0x6f, 0xef, 0xc5, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x22, 0x81, 0x1c, 0x77, 0xc6, 0x03, 0x00, 0x00,
}
