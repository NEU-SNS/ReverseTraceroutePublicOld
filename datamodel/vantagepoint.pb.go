// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/datamodel/vantagepoint.proto
// DO NOT EDIT!

package datamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VantagePoint struct {
	Hostname     string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Ip           uint32 `protobuf:"varint,2,opt,name=ip" json:"ip,omitempty"`
	Sshable      bool   `protobuf:"varint,3,opt,name=sshable" json:"sshable,omitempty"`
	Timestamp    bool   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	RecordRoute  bool   `protobuf:"varint,5,opt,name=record_route" json:"record_route,omitempty"`
	LastUpdated  int64  `protobuf:"varint,6,opt,name=last_updated" json:"last_updated,omitempty"`
	CanSpoof     bool   `protobuf:"varint,7,opt,name=can_spoof" json:"can_spoof,omitempty"`
	Controller   uint32 `protobuf:"varint,8,opt,name=controller" json:"controller,omitempty"`
	ReceiveSpoof bool   `protobuf:"varint,9,opt,name=receive_spoof" json:"receive_spoof,omitempty"`
	Site         string `protobuf:"bytes,10,opt,name=site" json:"site,omitempty"`
	SpoofChecked int64  `protobuf:"varint,11,opt,name=spoof_checked" json:"spoof_checked,omitempty"`
	Port         uint32 `protobuf:"varint,12,opt,name=port" json:"port,omitempty"`
}

func (m *VantagePoint) Reset()                    { *m = VantagePoint{} }
func (m *VantagePoint) String() string            { return proto.CompactTextString(m) }
func (*VantagePoint) ProtoMessage()               {}
func (*VantagePoint) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type VPRequest struct {
}

func (m *VPRequest) Reset()                    { *m = VPRequest{} }
func (m *VPRequest) String() string            { return proto.CompactTextString(m) }
func (*VPRequest) ProtoMessage()               {}
func (*VPRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type VPReturn struct {
	Vps []*VantagePoint `protobuf:"bytes,1,rep,name=vps" json:"vps,omitempty"`
}

func (m *VPReturn) Reset()                    { *m = VPReturn{} }
func (m *VPReturn) String() string            { return proto.CompactTextString(m) }
func (*VPReturn) ProtoMessage()               {}
func (*VPReturn) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *VPReturn) GetVps() []*VantagePoint {
	if m != nil {
		return m.Vps
	}
	return nil
}

type RRSpooferRequest struct {
	Addr uint32 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max  uint32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (m *RRSpooferRequest) Reset()                    { *m = RRSpooferRequest{} }
func (m *RRSpooferRequest) String() string            { return proto.CompactTextString(m) }
func (*RRSpooferRequest) ProtoMessage()               {}
func (*RRSpooferRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

type RRSpooferResponse struct {
	Addr     uint32          `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max      uint32          `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	Spoofers []*VantagePoint `protobuf:"bytes,3,rep,name=spoofers" json:"spoofers,omitempty"`
}

func (m *RRSpooferResponse) Reset()                    { *m = RRSpooferResponse{} }
func (m *RRSpooferResponse) String() string            { return proto.CompactTextString(m) }
func (*RRSpooferResponse) ProtoMessage()               {}
func (*RRSpooferResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *RRSpooferResponse) GetSpoofers() []*VantagePoint {
	if m != nil {
		return m.Spoofers
	}
	return nil
}

type TSSpooferRequest struct {
	Max uint32 `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
}

func (m *TSSpooferRequest) Reset()                    { *m = TSSpooferRequest{} }
func (m *TSSpooferRequest) String() string            { return proto.CompactTextString(m) }
func (*TSSpooferRequest) ProtoMessage()               {}
func (*TSSpooferRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

type TSSpooferResponse struct {
	Max      uint32          `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
	Spoofers []*VantagePoint `protobuf:"bytes,2,rep,name=spoofers" json:"spoofers,omitempty"`
}

func (m *TSSpooferResponse) Reset()                    { *m = TSSpooferResponse{} }
func (m *TSSpooferResponse) String() string            { return proto.CompactTextString(m) }
func (*TSSpooferResponse) ProtoMessage()               {}
func (*TSSpooferResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *TSSpooferResponse) GetSpoofers() []*VantagePoint {
	if m != nil {
		return m.Spoofers
	}
	return nil
}

func init() {
	proto.RegisterType((*VantagePoint)(nil), "datamodel.VantagePoint")
	proto.RegisterType((*VPRequest)(nil), "datamodel.VPRequest")
	proto.RegisterType((*VPReturn)(nil), "datamodel.VPReturn")
	proto.RegisterType((*RRSpooferRequest)(nil), "datamodel.RRSpooferRequest")
	proto.RegisterType((*RRSpooferResponse)(nil), "datamodel.RRSpooferResponse")
	proto.RegisterType((*TSSpooferRequest)(nil), "datamodel.TSSpooferRequest")
	proto.RegisterType((*TSSpooferResponse)(nil), "datamodel.TSSpooferResponse")
}

func init() {
	proto.RegisterFile("github.com/NEU-SNS/ReverseTraceroute/datamodel/vantagepoint.proto", fileDescriptor5)
}

var fileDescriptor5 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0x51, 0xcf, 0x93, 0x30,
	0x14, 0x86, 0xb3, 0xf1, 0xb9, 0xc1, 0x81, 0xc5, 0xad, 0xd1, 0xd8, 0x3b, 0x0d, 0xf1, 0x62, 0x5e,
	0x0c, 0x8c, 0xfe, 0x02, 0x4d, 0xbc, 0x32, 0x59, 0x16, 0x98, 0x4b, 0xf4, 0x86, 0x74, 0x70, 0x1c,
	0x44, 0xa0, 0xb5, 0x2d, 0xc4, 0x3f, 0xed, 0x7f, 0xb0, 0x74, 0x38, 0xf1, 0xbb, 0xd8, 0x1d, 0x9c,
	0x3e, 0xbc, 0xcf, 0xcb, 0x49, 0xe1, 0xc3, 0xa5, 0xd2, 0x65, 0x77, 0x8e, 0x72, 0xde, 0xc4, 0xfb,
	0x4f, 0x5f, 0x76, 0xe9, 0x3e, 0x8d, 0x13, 0xec, 0x51, 0x2a, 0x3c, 0x4a, 0x96, 0xa3, 0xe4, 0x9d,
	0xc6, 0xb8, 0x60, 0x9a, 0x35, 0xbc, 0xc0, 0x3a, 0xee, 0x59, 0xab, 0xd9, 0x05, 0x05, 0xaf, 0x5a,
	0x1d, 0x09, 0xc9, 0x35, 0x27, 0xde, 0xed, 0x34, 0xfc, 0x3d, 0x83, 0xe0, 0x74, 0x25, 0x0e, 0x03,
	0x41, 0xd6, 0xe0, 0x96, 0x5c, 0xe9, 0x96, 0x35, 0x48, 0x67, 0xaf, 0x66, 0x5b, 0x8f, 0x00, 0xcc,
	0x2b, 0x41, 0xe7, 0xe6, 0x79, 0x45, 0x9e, 0xc2, 0x52, 0xa9, 0x92, 0x9d, 0x6b, 0xa4, 0x8e, 0x19,
	0xb8, 0x64, 0x03, 0x9e, 0xae, 0x1a, 0x54, 0x26, 0x4f, 0xd0, 0x07, 0x3b, 0x7a, 0x06, 0x81, 0xc4,
	0x9c, 0xcb, 0x22, 0xb3, 0x55, 0xe8, 0x93, 0xbf, 0xd3, 0x9a, 0x29, 0x9d, 0x75, 0xc2, 0xc8, 0xb1,
	0xa0, 0x0b, 0x33, 0x75, 0x86, 0xcf, 0x73, 0xd6, 0x66, 0x4a, 0x70, 0xfe, 0x9d, 0x2e, 0x2d, 0x68,
	0x7c, 0x39, 0x6f, 0xb5, 0xe4, 0x75, 0x8d, 0x92, 0xba, 0x56, 0xfb, 0x1c, 0x56, 0x26, 0x12, 0xab,
	0x1e, 0x47, 0xd4, 0xb3, 0x68, 0x00, 0x0f, 0xaa, 0x32, 0x06, 0xb0, 0x3d, 0x0d, 0x64, 0x0f, 0xb3,
	0xbc, 0xc4, 0xfc, 0x87, 0x51, 0xf8, 0x56, 0x61, 0x20, 0xc1, 0xa5, 0xa6, 0xc1, 0x90, 0x14, 0xfa,
	0xe0, 0x9d, 0x0e, 0x09, 0xfe, 0xec, 0x4c, 0xe5, 0xf0, 0x2d, 0xb8, 0xc3, 0x8b, 0xee, 0x64, 0x4b,
	0x5e, 0x83, 0xd3, 0x0b, 0x65, 0x7e, 0xd9, 0xd9, 0xfa, 0xef, 0x5e, 0x44, 0xb7, 0x0d, 0x45, 0xd3,
	0xed, 0x84, 0x3b, 0x58, 0x27, 0x49, 0x3a, 0x58, 0x50, 0x8e, 0x29, 0x83, 0x80, 0x15, 0x85, 0xb4,
	0xdb, 0x5a, 0x11, 0x1f, 0x9c, 0x86, 0xfd, 0xba, 0xae, 0x2b, 0xfc, 0x0a, 0x9b, 0x09, 0x6e, 0xda,
	0xb5, 0x0a, 0xef, 0xf0, 0xe4, 0x0d, 0xb8, 0xea, 0x4a, 0x2b, 0xb3, 0xdf, 0xbb, 0x4d, 0x5e, 0xc2,
	0xfa, 0x98, 0x3e, 0x6a, 0x32, 0x66, 0xd9, 0xe0, 0xf0, 0x33, 0x6c, 0x26, 0xc0, 0xe8, 0x9e, 0x12,
	0xff, 0xd9, 0xe6, 0x77, 0x6d, 0x1f, 0xfd, 0x6f, 0xff, 0xee, 0xcc, 0x79, 0x61, 0x6f, 0xd1, 0xfb,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xcd, 0x6a, 0x6d, 0x8a, 0x02, 0x00, 0x00,
}
