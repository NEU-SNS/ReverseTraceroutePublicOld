// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/datamodel/vantagepoint.proto
// DO NOT EDIT!

package datamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VantagePoint struct {
	Hostname     string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Ip           uint32 `protobuf:"varint,2,opt,name=ip" json:"ip,omitempty"`
	Sshable      bool   `protobuf:"varint,3,opt,name=sshable" json:"sshable,omitempty"`
	Timestamp    bool   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	RecordRoute  bool   `protobuf:"varint,5,opt,name=record_route" json:"record_route,omitempty"`
	LastUpdated  int64  `protobuf:"varint,6,opt,name=last_updated" json:"last_updated,omitempty"`
	CanSpoof     bool   `protobuf:"varint,7,opt,name=can_spoof" json:"can_spoof,omitempty"`
	Controller   uint32 `protobuf:"varint,8,opt,name=controller" json:"controller,omitempty"`
	ReceiveSpoof bool   `protobuf:"varint,9,opt,name=receive_spoof" json:"receive_spoof,omitempty"`
	Site         string `protobuf:"bytes,10,opt,name=site" json:"site,omitempty"`
	SpoofChecked int64  `protobuf:"varint,11,opt,name=spoof_checked" json:"spoof_checked,omitempty"`
	Port         uint32 `protobuf:"varint,12,opt,name=port" json:"port,omitempty"`
}

func (m *VantagePoint) Reset()                    { *m = VantagePoint{} }
func (m *VantagePoint) String() string            { return proto.CompactTextString(m) }
func (*VantagePoint) ProtoMessage()               {}
func (*VantagePoint) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type VPRequest struct {
}

func (m *VPRequest) Reset()                    { *m = VPRequest{} }
func (m *VPRequest) String() string            { return proto.CompactTextString(m) }
func (*VPRequest) ProtoMessage()               {}
func (*VPRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

type VPReturn struct {
	Vps []*VantagePoint `protobuf:"bytes,1,rep,name=vps" json:"vps,omitempty"`
}

func (m *VPReturn) Reset()                    { *m = VPReturn{} }
func (m *VPReturn) String() string            { return proto.CompactTextString(m) }
func (*VPReturn) ProtoMessage()               {}
func (*VPReturn) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *VPReturn) GetVps() []*VantagePoint {
	if m != nil {
		return m.Vps
	}
	return nil
}

type SpooferRequest struct {
	Addr uint32 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max  uint32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
}

func (m *SpooferRequest) Reset()                    { *m = SpooferRequest{} }
func (m *SpooferRequest) String() string            { return proto.CompactTextString(m) }
func (*SpooferRequest) ProtoMessage()               {}
func (*SpooferRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

type SpooferResponse struct {
	Addr     uint32          `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Max      uint32          `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	Spoofers []*VantagePoint `protobuf:"bytes,3,rep,name=spoofers" json:"spoofers,omitempty"`
}

func (m *SpooferResponse) Reset()                    { *m = SpooferResponse{} }
func (m *SpooferResponse) String() string            { return proto.CompactTextString(m) }
func (*SpooferResponse) ProtoMessage()               {}
func (*SpooferResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *SpooferResponse) GetSpoofers() []*VantagePoint {
	if m != nil {
		return m.Spoofers
	}
	return nil
}

func init() {
	proto.RegisterType((*VantagePoint)(nil), "datamodel.VantagePoint")
	proto.RegisterType((*VPRequest)(nil), "datamodel.VPRequest")
	proto.RegisterType((*VPReturn)(nil), "datamodel.VPReturn")
	proto.RegisterType((*SpooferRequest)(nil), "datamodel.SpooferRequest")
	proto.RegisterType((*SpooferResponse)(nil), "datamodel.SpooferResponse")
}

var fileDescriptor8 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0xd1, 0x4e, 0xb3, 0x30,
	0x1c, 0xc5, 0xb3, 0xb1, 0x6f, 0x83, 0x3f, 0xec, 0x9b, 0x36, 0x1a, 0x7b, 0x69, 0x88, 0x17, 0x33,
	0x46, 0x30, 0xfa, 0x04, 0x9a, 0x78, 0xbb, 0x2c, 0x9b, 0xce, 0xc4, 0x1b, 0xd2, 0xc1, 0xdf, 0x41,
	0x04, 0x5a, 0xdb, 0x42, 0x7c, 0x69, 0xdf, 0xc1, 0xd2, 0xcd, 0xe9, 0xd5, 0xee, 0xe0, 0xf4, 0xc7,
	0x39, 0x87, 0x53, 0xb8, 0xdf, 0x14, 0x3a, 0x6f, 0xd6, 0x51, 0xca, 0xab, 0x78, 0xf6, 0xf8, 0x7c,
	0xbd, 0x9c, 0x2d, 0xe3, 0x05, 0xb6, 0x28, 0x15, 0x3e, 0x49, 0x96, 0xa2, 0xe4, 0x8d, 0xc6, 0x38,
	0x63, 0x9a, 0x55, 0x3c, 0xc3, 0x32, 0x6e, 0x59, 0xad, 0xd9, 0x06, 0x05, 0x2f, 0x6a, 0x1d, 0x09,
	0xc9, 0x35, 0x27, 0xde, 0xfe, 0x34, 0xfc, 0xea, 0x41, 0xb0, 0xda, 0x12, 0xf3, 0x8e, 0x20, 0x47,
	0xe0, 0xe6, 0x5c, 0xe9, 0x9a, 0x55, 0x48, 0x7b, 0xe7, 0xbd, 0xa9, 0x47, 0x00, 0xfa, 0x85, 0xa0,
	0x7d, 0xf3, 0x3c, 0x26, 0x13, 0x18, 0x29, 0x95, 0xb3, 0x75, 0x89, 0xd4, 0x31, 0x82, 0x4b, 0x8e,
	0xc1, 0xd3, 0x45, 0x85, 0xca, 0xf8, 0x09, 0x3a, 0xb0, 0xd2, 0x09, 0x04, 0x12, 0x53, 0x2e, 0xb3,
	0xc4, 0x56, 0xa1, 0xff, 0x7e, 0xd4, 0x92, 0x29, 0x9d, 0x34, 0xc2, 0x84, 0x63, 0x46, 0x87, 0x46,
	0x75, 0xba, 0xcf, 0x53, 0x56, 0x27, 0x4a, 0x70, 0xfe, 0x46, 0x47, 0x16, 0x34, 0x79, 0x29, 0xaf,
	0xb5, 0xe4, 0x65, 0x89, 0x92, 0xba, 0x36, 0xf6, 0x14, 0xc6, 0xc6, 0x12, 0x8b, 0x16, 0x77, 0xa8,
	0x67, 0xd1, 0x00, 0x06, 0xaa, 0x30, 0x09, 0x60, 0x7b, 0x1a, 0xc8, 0x1e, 0x26, 0x69, 0x8e, 0xe9,
	0xbb, 0x89, 0xf0, 0x6d, 0x84, 0x81, 0x04, 0x97, 0x9a, 0x06, 0x9d, 0x53, 0xe8, 0x83, 0xb7, 0x9a,
	0x2f, 0xf0, 0xa3, 0x31, 0x95, 0xc3, 0x1b, 0x70, 0xbb, 0x17, 0xdd, 0xc8, 0x9a, 0x5c, 0x80, 0xd3,
	0x0a, 0x65, 0x7e, 0xd9, 0x99, 0xfa, 0xb7, 0x67, 0xd1, 0x7e, 0xa1, 0xe8, 0xef, 0x3a, 0xe1, 0x15,
	0xfc, 0x5f, 0x76, 0x19, 0x28, 0x77, 0x1e, 0x9d, 0x3d, 0xcb, 0x32, 0x69, 0xb7, 0x1a, 0x13, 0x1f,
	0x9c, 0x8a, 0x7d, 0x6e, 0xc7, 0x0a, 0x5f, 0x60, 0xb2, 0x87, 0x4d, 0xb3, 0x5a, 0xe1, 0x01, 0x9a,
	0x5c, 0x82, 0xab, 0xb6, 0xb4, 0x32, 0xdb, 0x1e, 0x6a, 0xf1, 0xe0, 0xbf, 0xfe, 0xde, 0xe0, 0x7a,
	0x68, 0xef, 0xf4, 0xee, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xc3, 0x58, 0xb7, 0x18, 0x02, 0x00,
	0x00,
}
