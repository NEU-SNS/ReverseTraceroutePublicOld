// Code generated by protoc-gen-go.
// source: github.com/NEU-SNS/ReverseTraceroute/plcontroller/pb/plcontrollerapi.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/NEU-SNS/ReverseTraceroute/plcontroller/pb/plcontrollerapi.proto

It has these top-level messages:
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import datamodel1 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel2 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel3 "github.com/NEU-SNS/ReverseTraceroute/datamodel"
import datamodel4 "github.com/NEU-SNS/ReverseTraceroute/datamodel"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for PLController service

type PLControllerClient interface {
	Ping(ctx context.Context, opts ...grpc.CallOption) (PLController_PingClient, error)
	Traceroute(ctx context.Context, opts ...grpc.CallOption) (PLController_TracerouteClient, error)
	ReceiveSpoof(ctx context.Context, in *datamodel4.RecSpoof, opts ...grpc.CallOption) (PLController_ReceiveSpoofClient, error)
	GetVPs(ctx context.Context, in *datamodel3.VPRequest, opts ...grpc.CallOption) (PLController_GetVPsClient, error)
	AcceptProbes(ctx context.Context, in *datamodel4.SpoofedProbes, opts ...grpc.CallOption) (*datamodel4.SpoofedProbesResponse, error)
}

type pLControllerClient struct {
	cc *grpc.ClientConn
}

func NewPLControllerClient(cc *grpc.ClientConn) PLControllerClient {
	return &pLControllerClient{cc}
}

func (c *pLControllerClient) Ping(ctx context.Context, opts ...grpc.CallOption) (PLController_PingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PLController_serviceDesc.Streams[0], c.cc, "/pb.PLController/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &pLControllerPingClient{stream}
	return x, nil
}

type PLController_PingClient interface {
	Send(*datamodel1.PingArg) error
	Recv() (*datamodel1.Ping, error)
	grpc.ClientStream
}

type pLControllerPingClient struct {
	grpc.ClientStream
}

func (x *pLControllerPingClient) Send(m *datamodel1.PingArg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pLControllerPingClient) Recv() (*datamodel1.Ping, error) {
	m := new(datamodel1.Ping)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pLControllerClient) Traceroute(ctx context.Context, opts ...grpc.CallOption) (PLController_TracerouteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PLController_serviceDesc.Streams[1], c.cc, "/pb.PLController/Traceroute", opts...)
	if err != nil {
		return nil, err
	}
	x := &pLControllerTracerouteClient{stream}
	return x, nil
}

type PLController_TracerouteClient interface {
	Send(*datamodel2.TracerouteArg) error
	Recv() (*datamodel2.Traceroute, error)
	grpc.ClientStream
}

type pLControllerTracerouteClient struct {
	grpc.ClientStream
}

func (x *pLControllerTracerouteClient) Send(m *datamodel2.TracerouteArg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pLControllerTracerouteClient) Recv() (*datamodel2.Traceroute, error) {
	m := new(datamodel2.Traceroute)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pLControllerClient) ReceiveSpoof(ctx context.Context, in *datamodel4.RecSpoof, opts ...grpc.CallOption) (PLController_ReceiveSpoofClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PLController_serviceDesc.Streams[2], c.cc, "/pb.PLController/ReceiveSpoof", opts...)
	if err != nil {
		return nil, err
	}
	x := &pLControllerReceiveSpoofClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PLController_ReceiveSpoofClient interface {
	Recv() (*datamodel4.NotifyRecSpoofResponse, error)
	grpc.ClientStream
}

type pLControllerReceiveSpoofClient struct {
	grpc.ClientStream
}

func (x *pLControllerReceiveSpoofClient) Recv() (*datamodel4.NotifyRecSpoofResponse, error) {
	m := new(datamodel4.NotifyRecSpoofResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pLControllerClient) GetVPs(ctx context.Context, in *datamodel3.VPRequest, opts ...grpc.CallOption) (PLController_GetVPsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PLController_serviceDesc.Streams[3], c.cc, "/pb.PLController/GetVPs", opts...)
	if err != nil {
		return nil, err
	}
	x := &pLControllerGetVPsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PLController_GetVPsClient interface {
	Recv() (*datamodel3.VPReturn, error)
	grpc.ClientStream
}

type pLControllerGetVPsClient struct {
	grpc.ClientStream
}

func (x *pLControllerGetVPsClient) Recv() (*datamodel3.VPReturn, error) {
	m := new(datamodel3.VPReturn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pLControllerClient) AcceptProbes(ctx context.Context, in *datamodel4.SpoofedProbes, opts ...grpc.CallOption) (*datamodel4.SpoofedProbesResponse, error) {
	out := new(datamodel4.SpoofedProbesResponse)
	err := grpc.Invoke(ctx, "/pb.PLController/AcceptProbes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PLController service

type PLControllerServer interface {
	Ping(PLController_PingServer) error
	Traceroute(PLController_TracerouteServer) error
	ReceiveSpoof(*datamodel4.RecSpoof, PLController_ReceiveSpoofServer) error
	GetVPs(*datamodel3.VPRequest, PLController_GetVPsServer) error
	AcceptProbes(context.Context, *datamodel4.SpoofedProbes) (*datamodel4.SpoofedProbesResponse, error)
}

func RegisterPLControllerServer(s *grpc.Server, srv PLControllerServer) {
	s.RegisterService(&_PLController_serviceDesc, srv)
}

func _PLController_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PLControllerServer).Ping(&pLControllerPingServer{stream})
}

type PLController_PingServer interface {
	Send(*datamodel1.Ping) error
	Recv() (*datamodel1.PingArg, error)
	grpc.ServerStream
}

type pLControllerPingServer struct {
	grpc.ServerStream
}

func (x *pLControllerPingServer) Send(m *datamodel1.Ping) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pLControllerPingServer) Recv() (*datamodel1.PingArg, error) {
	m := new(datamodel1.PingArg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PLController_Traceroute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PLControllerServer).Traceroute(&pLControllerTracerouteServer{stream})
}

type PLController_TracerouteServer interface {
	Send(*datamodel2.Traceroute) error
	Recv() (*datamodel2.TracerouteArg, error)
	grpc.ServerStream
}

type pLControllerTracerouteServer struct {
	grpc.ServerStream
}

func (x *pLControllerTracerouteServer) Send(m *datamodel2.Traceroute) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pLControllerTracerouteServer) Recv() (*datamodel2.TracerouteArg, error) {
	m := new(datamodel2.TracerouteArg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PLController_ReceiveSpoof_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel4.RecSpoof)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PLControllerServer).ReceiveSpoof(m, &pLControllerReceiveSpoofServer{stream})
}

type PLController_ReceiveSpoofServer interface {
	Send(*datamodel4.NotifyRecSpoofResponse) error
	grpc.ServerStream
}

type pLControllerReceiveSpoofServer struct {
	grpc.ServerStream
}

func (x *pLControllerReceiveSpoofServer) Send(m *datamodel4.NotifyRecSpoofResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PLController_GetVPs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel3.VPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PLControllerServer).GetVPs(m, &pLControllerGetVPsServer{stream})
}

type PLController_GetVPsServer interface {
	Send(*datamodel3.VPReturn) error
	grpc.ServerStream
}

type pLControllerGetVPsServer struct {
	grpc.ServerStream
}

func (x *pLControllerGetVPsServer) Send(m *datamodel3.VPReturn) error {
	return x.ServerStream.SendMsg(m)
}

func _PLController_AcceptProbes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datamodel4.SpoofedProbes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PLControllerServer).AcceptProbes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PLController/AcceptProbes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PLControllerServer).AcceptProbes(ctx, req.(*datamodel4.SpoofedProbes))
	}
	return interceptor(ctx, in, info, handler)
}

var _PLController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PLController",
	HandlerType: (*PLControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptProbes",
			Handler:    _PLController_AcceptProbes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _PLController_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Traceroute",
			Handler:       _PLController_Traceroute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveSpoof",
			Handler:       _PLController_ReceiveSpoof_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVPs",
			Handler:       _PLController_GetVPs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/NEU-SNS/ReverseTraceroute/plcontroller/pb/plcontrollerapi.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x4b, 0xf3, 0x40,
	0x14, 0x85, 0xdf, 0x96, 0xd2, 0xc5, 0x50, 0x78, 0x61, 0xaa, 0x20, 0x59, 0xa9, 0x2b, 0x37, 0x26,
	0x7e, 0x2c, 0xc4, 0x85, 0x48, 0x2d, 0x22, 0x94, 0x52, 0x42, 0xaa, 0x5d, 0xb8, 0x9b, 0x4c, 0x6f,
	0xe3, 0x40, 0x3a, 0x77, 0x9c, 0xb9, 0x29, 0xf8, 0x53, 0xfd, 0x37, 0x4e, 0xd3, 0xda, 0xa6, 0x45,
	0xc1, 0x2c, 0xe7, 0x9c, 0x7b, 0x9e, 0xfb, 0xc1, 0xb0, 0x41, 0xa6, 0xe8, 0xad, 0x48, 0x43, 0x89,
	0xf3, 0x68, 0xf4, 0xf8, 0x72, 0x3e, 0x1e, 0x8d, 0xa3, 0x04, 0x16, 0x60, 0x1d, 0x3c, 0x5b, 0x21,
	0xc1, 0x62, 0x41, 0x10, 0x99, 0x5c, 0xa2, 0x26, 0x8b, 0x79, 0x0e, 0x36, 0x32, 0xe9, 0xce, 0x5b,
	0x18, 0x15, 0x1a, 0x8b, 0x84, 0xbc, 0x69, 0xd2, 0xe0, 0xf6, 0x4f, 0xbc, 0xa9, 0x20, 0x31, 0xc7,
	0x29, 0xe4, 0x91, 0x51, 0x3a, 0x5b, 0xc5, 0x83, 0xfb, 0x9a, 0x51, 0xda, 0x88, 0x6b, 0x40, 0xaf,
	0x26, 0x60, 0x21, 0x34, 0x89, 0x0c, 0x0c, 0x2a, 0x4d, 0x6b, 0xc4, 0x5d, 0x4d, 0x84, 0x05, 0xe9,
	0x0c, 0xe2, 0x6c, 0x15, 0xbf, 0xfa, 0x6c, 0xb2, 0x4e, 0x3c, 0xec, 0x6f, 0x6e, 0xc3, 0x2f, 0x59,
	0x2b, 0xf6, 0x1b, 0x72, 0x1e, 0x6e, 0x32, 0xe1, 0x52, 0xe8, 0xd9, 0x2c, 0xf8, 0xbf, 0xa7, 0x9d,
	0xfe, 0x3b, 0x6b, 0x5c, 0x34, 0x78, 0x9f, 0xb1, 0x6d, 0x2b, 0x7e, 0x54, 0x29, 0xda, 0xca, 0xcb,
	0xf8, 0xe1, 0x8f, 0xce, 0x1a, 0x32, 0x60, 0x9d, 0x04, 0x24, 0xa8, 0x05, 0x8c, 0x97, 0xe3, 0xf1,
	0x6e, 0xa5, 0xd8, 0x1b, 0xa5, 0x18, 0x9c, 0x54, 0xc4, 0x11, 0x92, 0x9a, 0x7d, 0x7c, 0x5b, 0x09,
	0xf8, 0xad, 0xb4, 0xf3, 0x34, 0xcf, 0xba, 0x61, 0xed, 0x27, 0xa0, 0x49, 0xec, 0xf8, 0x41, 0x25,
	0x30, 0x89, 0x13, 0x78, 0x2f, 0xc0, 0x51, 0xd0, 0xdd, 0x53, 0xa9, 0xb0, 0xba, 0x0c, 0x0e, 0x59,
	0xa7, 0x27, 0x25, 0x18, 0x8a, 0x2d, 0xa6, 0xe0, 0x76, 0x76, 0x29, 0xdb, 0xc0, 0x74, 0xe5, 0x04,
	0xc7, 0xbf, 0x39, 0xdb, 0x41, 0x1e, 0x5a, 0xaf, 0xfe, 0x7f, 0xa5, 0xed, 0xf2, 0xd0, 0xd7, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0x05, 0x2e, 0x0f, 0xb8, 0x02, 0x00, 0x00,
}
